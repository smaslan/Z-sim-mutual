
zsim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000011d6  0000126a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  0080010c  0080010c  00001276  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000012c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026fd  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2b  00000000  00000000  00003acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fea  00000000  00000000  000047f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  000077e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ba  00000000  00000000  00007a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e57  00000000  00000000  000080fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00008f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c1       	rjmp	.+694    	; 0x2b8 <__ctors_end>
       2:	75 c1       	rjmp	.+746    	; 0x2ee <__bad_interrupt>
       4:	74 c1       	rjmp	.+744    	; 0x2ee <__bad_interrupt>
       6:	73 c1       	rjmp	.+742    	; 0x2ee <__bad_interrupt>
       8:	72 c1       	rjmp	.+740    	; 0x2ee <__bad_interrupt>
       a:	71 c1       	rjmp	.+738    	; 0x2ee <__bad_interrupt>
       c:	70 c1       	rjmp	.+736    	; 0x2ee <__bad_interrupt>
       e:	6f c1       	rjmp	.+734    	; 0x2ee <__bad_interrupt>
      10:	6e c1       	rjmp	.+732    	; 0x2ee <__bad_interrupt>
      12:	6d c1       	rjmp	.+730    	; 0x2ee <__bad_interrupt>
      14:	6c c1       	rjmp	.+728    	; 0x2ee <__bad_interrupt>
      16:	6b c1       	rjmp	.+726    	; 0x2ee <__bad_interrupt>
      18:	6a c1       	rjmp	.+724    	; 0x2ee <__bad_interrupt>
      1a:	69 c1       	rjmp	.+722    	; 0x2ee <__bad_interrupt>
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__vector_14>
      1e:	67 c1       	rjmp	.+718    	; 0x2ee <__bad_interrupt>
      20:	66 c1       	rjmp	.+716    	; 0x2ee <__bad_interrupt>
      22:	65 c1       	rjmp	.+714    	; 0x2ee <__bad_interrupt>
      24:	93 c3       	rjmp	.+1830   	; 0x74c <__vector_18>
      26:	63 c1       	rjmp	.+710    	; 0x2ee <__bad_interrupt>
      28:	62 c1       	rjmp	.+708    	; 0x2ee <__bad_interrupt>
      2a:	61 c1       	rjmp	.+706    	; 0x2ee <__bad_interrupt>
      2c:	60 c1       	rjmp	.+704    	; 0x2ee <__bad_interrupt>
      2e:	5f c1       	rjmp	.+702    	; 0x2ee <__bad_interrupt>
      30:	5e c1       	rjmp	.+700    	; 0x2ee <__bad_interrupt>
      32:	5d c1       	rjmp	.+698    	; 0x2ee <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	30 0a       	sbc	r3, r16
	...

00000037 <__c.2557>:
      37:	31 0a 00                                            1..

0000003a <__c.2555>:
      3a:	31 37 49 4e 44 31 30 00                             17IND10.

00000042 <__c.2553>:
      42:	53 59 53 54 3a 42 4f 4f 54 00                       SYST:BOOT.

0000004c <__c.2551>:
      4c:	53 59 53 54 3a 45 52 52 3f 00                       SYST:ERR?.

00000056 <__c.2549>:
      56:	5a 2d 53 69 6d 75 6c 61 74 6f 72 20 42 69 61 73     Z-Simulator Bias
      66:	20 53 6f 75 72 63 65 20 56 31 2e 31 2c 20 73 2e      Source V1.1, s.
      76:	6e 2e 20 32 30 32 30 30 32 31 34 0a 00              n. 20200214..

00000083 <__c.2547>:
      83:	2a 49 44 4e 3f 00                                   *IDN?.

00000089 <__c.2544>:
      89:	2a 52 53 54 00                                      *RST.

0000008e <__c.2542>:
      8e:	2b 31 0a 00                                         +1..

00000092 <__c.2540>:
      92:	2a 4f 50 43 3f 00                                   *OPC?.

00000098 <__c.2538>:
      98:	20 4f 6e 6c 79 20 4c 4f 2f 48 49 20 6f 72 20 4c      Only LO/HI or L
      a8:	4f 57 2f 48 49 47 48 20 73 75 70 70 6f 72 74 65     OW/HIGH supporte
      b8:	64 2e 00                                            d..

000000bb <__c.2536>:
      bb:	48 49 00                                            HI.

000000be <__c.2534>:
      be:	48 49 47 48 00                                      HIGH.

000000c3 <__c.2532>:
      c3:	4c 4f 57 00                                         LOW.

000000c7 <__c.2530>:
      c7:	4c 4f 00                                            LO.

000000ca <__c.2528>:
      ca:	46 41 4e 00                                         FAN.

000000ce <__c.2526>:
      ce:	20 4d 61 78 69 6d 75 6d 20 73 75 70 70 6f 72 74      Maximum support
      de:	65 64 20 6c 65 76 65 6c 20 69 73 20 35 30 30 30     ed level is 5000
      ee:	6d 56 2e 00                                         mV..

000000f2 <__c.2523>:
      f2:	42 49 41 53 3a 50 57 52 3a 56 4f 4c 54 00           BIAS:PWR:VOLT.

00000100 <__c.2521>:
     100:	20 4d 61 78 69 6d 75 6d 20 73 75 70 70 6f 72 74      Maximum support
     110:	65 64 20 6c 65 76 65 6c 20 69 73 20 35 30 30 30     ed level is 5000
     120:	6d 56 2e 00                                         mV..

00000124 <__c.2518>:
     124:	42 49 41 53 3a 50 4f 54 3a 56 4f 4c 54 00           BIAS:POT:VOLT.

00000132 <__c.2516>:
     132:	20 4d 61 78 69 6d 75 6d 20 73 75 70 70 6f 72 74      Maximum support
     142:	65 64 20 6c 65 76 65 6c 20 69 73 20 35 30 30 30     ed level is 5000
     152:	6d 56 2e 00                                         mV..

00000156 <__c.2513>:
     156:	42 49 41 53 3a 56 4f 4c 54 00                       BIAS:VOLT.

00000160 <__c.2511>:
     160:	20 4f 6e 6c 79 20 4f 4e 2f 4f 46 46 20 6f 72 20      Only ON/OFF or 
     170:	31 2f 30 20 73 75 70 70 6f 72 74 65 64 2e 00        1/0 supported..

0000017f <__c.2509>:
     17f:	30 00                                               0.

00000181 <__c.2507>:
     181:	4f 46 46 00                                         OFF.

00000185 <__c.2505>:
     185:	31 00                                               1.

00000187 <__c.2503>:
     187:	4f 4e 00                                            ON.

0000018a <__c.2501>:
     18a:	50 4f 57 45 52 3a 53 54 41 54 45 00                 POWER:STATE.

00000196 <__c.2499>:
     196:	20 4f 6e 6c 79 20 4f 4e 2f 4f 46 46 20 6f 72 20      Only ON/OFF or 
     1a6:	31 2f 30 20 73 75 70 70 6f 72 74 65 64 2e 00        1/0 supported..

000001b5 <__c.2497>:
     1b5:	30 00                                               0.

000001b7 <__c.2495>:
     1b7:	4f 46 46 00                                         OFF.

000001bb <__c.2493>:
     1bb:	31 00                                               1.

000001bd <__c.2491>:
     1bd:	4f 4e 00                                            ON.

000001c0 <__c.2489>:
     1c0:	43 4f 4d 4d 4f 4e 3a 53 54 41 54 45 00              COMMON:STATE.

000001cd <__c.2487>:
     1cd:	20 4f 6e 6c 79 20 72 61 6e 67 65 73 20 31 20 61      Only ranges 1 a
     1dd:	6e 64 20 32 20 73 75 70 70 6f 72 74 65 64 2e 00     nd 2 supported..

000001ed <__c.2484>:
     1ed:	52 41 4e 47 45 00                                   RANGE.

000001f3 <__c.2482>:
     1f3:	20 4f 6e 6c 79 20 49 4e 44 20 6f 72 20 43 41 50      Only IND or CAP
     203:	20 73 75 70 70 6f 72 74 65 64 2e 00                  supported..

0000020f <__c.2480>:
     20f:	43 41 50 00                                         CAP.

00000213 <__c.2478>:
     213:	49 4e 44 00                                         IND.

00000217 <__c.2476>:
     217:	4d 4f 44 45 00                                      MODE.

0000021c <srdec_lut>:
     21c:	55 56 59 5a 65 66 69 6a 95 96 99 9a a5 a6 a9 aa     UVYZefij........

0000022c <__c.2038>:
     22c:	0a 00                                               ..

0000022e <__c.2035>:
     22e:	30 2c 20 4e 6f 20 65 72 72 6f 72 2e 00              0, No error..

0000023b <__c.2032>:
     23b:	2d 32 35 38 2c 20 45 45 50 52 4f 4d 20 77 72 69     -258, EEPROM wri
     24b:	74 65 20 70 72 6f 74 65 63 74 65 64 2e 00           te protected..

00000259 <__c.2029>:
     259:	2d 31 30 39 2c 20 4d 69 73 73 69 6e 67 20 70 61     -109, Missing pa
     269:	72 61 6d 65 74 65 72 73 2e 00                       rameters..

00000273 <__c.2026>:
     273:	2d 31 30 34 2c 20 57 72 6f 6e 67 20 70 61 72 61     -104, Wrong para
     283:	6d 65 74 65 72 20 74 79 70 65 20 6f 72 20 76 61     meter type or va
     293:	6c 75 65 2e 00                                      lue..

00000298 <__c.2022>:
     298:	2d 31 31 33 2c 20 55 6e 64 65 66 69 6e 65 64 20     -113, Undefined 
     2a8:	63 6f 6d 6d 61 6e 64 20 68 65 61 64 65 72 2e 00     command header..

000002b8 <__ctors_end>:
     2b8:	11 24       	eor	r1, r1
     2ba:	1f be       	out	0x3f, r1	; 63
     2bc:	cf ef       	ldi	r28, 0xFF	; 255
     2be:	d4 e0       	ldi	r29, 0x04	; 4
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	cd bf       	out	0x3d, r28	; 61

000002c4 <__do_copy_data>:
     2c4:	11 e0       	ldi	r17, 0x01	; 1
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b1 e0       	ldi	r27, 0x01	; 1
     2ca:	e6 ed       	ldi	r30, 0xD6	; 214
     2cc:	f1 e1       	ldi	r31, 0x11	; 17
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__do_copy_data+0x10>
     2d0:	05 90       	lpm	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	ac 30       	cpi	r26, 0x0C	; 12
     2d6:	b1 07       	cpc	r27, r17
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <__do_copy_data+0xc>

000002da <__do_clear_bss>:
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	ac e0       	ldi	r26, 0x0C	; 12
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <.do_clear_bss_start>

000002e2 <.do_clear_bss_loop>:
     2e2:	1d 92       	st	X+, r1

000002e4 <.do_clear_bss_start>:
     2e4:	a8 3a       	cpi	r26, 0xA8	; 168
     2e6:	b2 07       	cpc	r27, r18
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <.do_clear_bss_loop>
     2ea:	4f d3       	rcall	.+1694   	; 0x98a <main>
     2ec:	72 c7       	rjmp	.+3812   	; 0x11d2 <_exit>

000002ee <__bad_interrupt>:
     2ee:	88 ce       	rjmp	.-752    	; 0x0 <__vectors>

000002f0 <spec_relay_update>:

// update special relays state (states: new flag states, mask: 0's to inhibit state change)
// call this to initiate transition (IRQ must be enabled!)
void spec_relay_update(uint8_t states,uint8_t mask)
{
	uint8_t temp = specr;
     2f0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <specr>

	// update relay flags
	temp &= ~mask;
     2f4:	96 2f       	mov	r25, r22
     2f6:	90 95       	com	r25
     2f8:	92 23       	and	r25, r18
	temp |= (states & mask) | (1<<REMODF);
     2fa:	68 23       	and	r22, r24
     2fc:	69 2b       	or	r22, r25
     2fe:	60 68       	ori	r22, 0x80	; 128
	
	// store to state variable
	specr = temp;
     300:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <specr>
}
     304:	08 95       	ret

00000306 <spec_relay_set>:

// send special relays MAX4820 controler command via SPI
void spec_relay_set(uint8_t data)
{
	// CS active
	cbi(SPIP,SS);
     306:	2a 98       	cbi	0x05, 2	; 5
	
	// send data
	SPDR = data;
     308:	8e bd       	out	0x2e, r24	; 46
	
	// wait for transfer done
	while(!bit_is_set(SPSR,SPIF));
     30a:	0d b4       	in	r0, 0x2d	; 45
     30c:	07 fe       	sbrs	r0, 7
     30e:	fd cf       	rjmp	.-6      	; 0x30a <spec_relay_set+0x4>

	// disable CS
	sbi(SPIP,SS);
     310:	2a 9a       	sbi	0x05, 2	; 5
}
     312:	08 95       	ret

00000314 <spec_relay_init>:

// initialize special relays MAX4820 controler (SPI bus)
void spec_relay_init(void)
{
	// set SPI pin directions
	sbi(SPID,SS);
     314:	22 9a       	sbi	0x04, 2	; 4
	sbi(SPID,SCK);
     316:	25 9a       	sbi	0x04, 5	; 4
	sbi(SPID,MOSI);
     318:	23 9a       	sbi	0x04, 3	; 4

	// enable SPI at full speed
	SPCR = (1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR0);
     31a:	80 e5       	ldi	r24, 0x50	; 80
     31c:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
     31e:	8d b5       	in	r24, 0x2d	; 45
     320:	81 60       	ori	r24, 0x01	; 1
     322:	8d bd       	out	0x2d, r24	; 45

	// chip select to inactive
	sbi(SPIP,SS);
     324:	2a 9a       	sbi	0x05, 2	; 5

	// all drivers to idle state
	spec_relay_set(0x00);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	ee cf       	rjmp	.-36     	; 0x306 <spec_relay_set>

0000032a <spec_relay_generate_pulse>:

// generate MAX4820 control pulse defined by low nibble bits of 'states'
void spec_relay_generate_pulse(uint8_t states)
{
	// start pulse
	spec_relay_set(pgm_read_byte(&srdec_lut[states&0x0Fu]));
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	e8 2f       	mov	r30, r24
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	e4 5e       	subi	r30, 0xE4	; 228
     332:	fd 4f       	sbci	r31, 0xFD	; 253
     334:	84 91       	lpm	r24, Z
     336:	e7 cf       	rjmp	.-50     	; 0x306 <spec_relay_set>

00000338 <set_relays>:

// initiate assynchronous update of relay states (ISR must be enabled!)
//   optionally wait for completion of the command
//   always waits for completion of previous command@
void set_relays(volatile TCTRL *ctrl,uint8_t wait)
{
     338:	fc 01       	movw	r30, r24
	// wait for previous command to end
	while(bit_is_set(specr,REMODF));
     33a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <specr>
     33e:	87 fd       	sbrc	r24, 7
     340:	fc cf       	rjmp	.-8      	; 0x33a <set_relays+0x2>

	// make new command
	specr = ((!ctrl->ind)<<RE_POL) | (ctrl->range<<RE_RNG) | ((!ctrl->com)<<RE_COM) | (ctrl->power<<RE_PWR) | (1<<REMODF);
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	81 11       	cpse	r24, r1
     348:	01 c0       	rjmp	.+2      	; 0x34c <set_relays+0x14>
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	82 81       	ldd	r24, Z+2	; 0x02
     34e:	23 81       	ldd	r18, Z+3	; 0x03
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	21 11       	cpse	r18, r1
     354:	01 c0       	rjmp	.+2      	; 0x358 <set_relays+0x20>
     356:	44 e0       	ldi	r20, 0x04	; 4
     358:	24 81       	ldd	r18, Z+4	; 0x04
     35a:	58 e0       	ldi	r21, 0x08	; 8
     35c:	25 9f       	mul	r18, r21
     35e:	90 01       	movw	r18, r0
     360:	11 24       	eor	r1, r1
     362:	84 2b       	or	r24, r20
     364:	82 2b       	or	r24, r18
     366:	89 2b       	or	r24, r25
     368:	80 68       	ori	r24, 0x80	; 128
     36a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <specr>

	// optional wait for completion
	if(wait)
     36e:	66 23       	and	r22, r22
     370:	21 f0       	breq	.+8      	; 0x37a <set_relays+0x42>
		while(bit_is_set(specr,REMODF));
     372:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <specr>
     376:	87 fd       	sbrc	r24, 7
     378:	fc cf       	rjmp	.-8      	; 0x372 <set_relays+0x3a>
		
}
     37a:	08 95       	ret

0000037c <spec_rel_tick>:
void spec_rel_tick(void)
{
	static uint8_t spec_rel = 0x00; // local state variable for the relay control
	static uint8_t spec_rel_cnt = 0; // relay control timing counter
	
	if(!spec_rel_cnt && bit_is_set(specr,REMODF) && !bit_is_set(spec_rel,REMODF))
     37c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <spec_rel_cnt.2404>
     380:	81 11       	cpse	r24, r1
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <spec_rel_tick+0x48>
     384:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <specr>
     388:	87 ff       	sbrs	r24, 7
     38a:	0c c0       	rjmp	.+24     	; 0x3a4 <spec_rel_tick+0x28>
     38c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spec_rel.2403>
     390:	87 fd       	sbrc	r24, 7
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <spec_rel_tick+0x28>
	{
		// --- user command to change relay states found:
		
		// store desired new states
		spec_rel = specr;
     394:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <specr>
     398:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <spec_rel.2403>

		// start control pulse timer
		spec_rel_cnt = RESLEN;
     39c:	94 e0       	ldi	r25, 0x04	; 4
     39e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <spec_rel_cnt.2404>
				
		// start control pulse
		spec_relay_generate_pulse(spec_rel);
     3a2:	c3 cf       	rjmp	.-122    	; 0x32a <spec_relay_generate_pulse>
		
	}
	else if(!spec_rel_cnt && bit_is_set(spec_rel,REMODF))
     3a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spec_rel.2403>
     3a8:	87 ff       	sbrs	r24, 7
     3aa:	0f c0       	rjmp	.+30     	; 0x3ca <spec_rel_tick+0x4e>
	{
		// --- relay pulse end reached:
		
		// clear modified flag in local state variable
		cbi(spec_rel,REMODF);
     3ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spec_rel.2403>
     3b0:	8f 77       	andi	r24, 0x7F	; 127
     3b2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <spec_rel.2403>

		// clear modified flag in user command states variable (indicates the command is done)
		cbi(specr,REMODF);
     3b6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <specr>
     3ba:	8f 77       	andi	r24, 0x7F	; 127
     3bc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <specr>

		// end control pulse
		spec_relay_set(0x00);
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	a1 cf       	rjmp	.-190    	; 0x306 <spec_relay_set>

	}
	else if(spec_rel_cnt > 0)
		spec_rel_cnt--;
     3c4:	81 50       	subi	r24, 0x01	; 1
     3c6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spec_rel_cnt.2404>
}
     3ca:	08 95       	ret

000003cc <timeout_set>:
// --- TIMEOUT STUFF ---
// timeout timer [ms]
volatile uint16_t timeout = 0;
// set mew timeout value
void timeout_set(uint16_t time_ms)
{
     3cc:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d0:	f8 94       	cli
	{
		// set new time
		timeout = time_ms;		
     3d2:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <timeout+0x1>
     3d6:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <timeout>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3da:	8f bf       	out	0x3f, r24	; 63
	}	
}
     3dc:	08 95       	ret

000003de <timeout_done>:
// check if timeout is done
uint8_t timeout_done(void)
{
	uint8_t done;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3de:	8f b7       	in	r24, 0x3f	; 63
    cli();
     3e0:	f8 94       	cli
	{
		// set new time
		done = (timeout == 0);
     3e2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <timeout>
     3e6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <timeout+0x1>
    SREG = *__s;
     3ea:	8f bf       	out	0x3f, r24	; 63
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	23 2b       	or	r18, r19
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <timeout_done+0x16>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
	}	
	return(done);
}
     3f4:	08 95       	ret

000003f6 <__vector_14>:
volatile uint8_t btns = 0x00;
volatile uint8_t btns_down = 0x00;

// tick ISR
ISR(TIMER0_COMPA_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	2f 93       	push	r18
     402:	3f 93       	push	r19
     404:	4f 93       	push	r20
     406:	5f 93       	push	r21
     408:	6f 93       	push	r22
     40a:	7f 93       	push	r23
     40c:	8f 93       	push	r24
     40e:	9f 93       	push	r25
     410:	af 93       	push	r26
     412:	bf 93       	push	r27
     414:	ef 93       	push	r30
     416:	ff 93       	push	r31
	
	static uint8_t mux_cycle = 0;
	static uint8_t btns_old = 0x00;

	if(mux_cycle == 0)
     418:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mux_cycle.2430>
     41c:	81 11       	cpse	r24, r1
     41e:	2e c0       	rjmp	.+92     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		// --- button B0:

		// change mux states
		cbi(MD0d,MD0);	// mux port to inputs
     420:	3a 98       	cbi	0x07, 2	; 7
		cbi(MD1d,MD1);
     422:	53 98       	cbi	0x0a, 3	; 10
		cbi(MD2d,MD2);
     424:	39 98       	cbi	0x07, 1	; 7
		cbi(MD3d,MD3);
     426:	54 98       	cbi	0x0a, 4	; 10
		cbi(MD4d,MD4);
     428:	38 98       	cbi	0x07, 0	; 7
		
		sbi(MD0p,MD0);	// mux port pullups
     42a:	42 9a       	sbi	0x08, 2	; 8
		sbi(MD1p,MD1);
     42c:	5b 9a       	sbi	0x0b, 3	; 11
		sbi(MD2p,MD2);
     42e:	41 9a       	sbi	0x08, 1	; 8
		sbi(MD3p,MD3);
     430:	5c 9a       	sbi	0x0b, 4	; 11
		sbi(MD4p,MD4);
     432:	40 9a       	sbi	0x08, 0	; 8

		sbi(ML1p,ML1);	// clear LEDs
     434:	5d 9a       	sbi	0x0b, 5	; 11
		cbi(MB0p,MB0);  // set B0
     436:	5f 98       	cbi	0x0b, 7	; 11
		// change mux states
		cbi(ML1p,ML1);  // set L1

	}
	
	mux_cycle++;	// next cycle
     438:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mux_cycle.2430>
     43c:	8f 5f       	subi	r24, 0xFF	; 255
	if(mux_cycle >= 2 + LED_DEADTIME + LED_CYCLES*2)
     43e:	89 30       	cpi	r24, 0x09	; 9
     440:	08 f0       	brcs	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	a9 c0       	rjmp	.+338    	; 0x596 <__stack+0x97>
	mux_cycle++;	// next cycle
     444:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mux_cycle.2430>
		btns_old = btns;
	}


	// --- latching relays sequencer ---
	spec_rel_tick();
     448:	99 df       	rcall	.-206    	; 0x37c <spec_rel_tick>

	
	// --- update timeout timer ---
	static uint8_t time_div = 0;	
	time_div++;
     44a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <time_div.2434>
     44e:	8f 5f       	subi	r24, 0xFF	; 255
	if(time_div >= (uint8_t)(1e-3/MTICK))
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	08 f0       	brcs	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	b5 c0       	rjmp	.+362    	; 0x5c0 <__stack+0xc1>
	time_div++;
     456:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <time_div.2434>
		// timeout timer tick (1ms)
		time_div = 0;
		if(timeout)
			timeout--;
	}
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti
	else if(mux_cycle == 1)
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	01 f5       	brne	.+64     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		uint8_t tmp = btns;
     480:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <btns>
		bcopy(tmp,0,MD0i,MD0);
     484:	32 9b       	sbis	0x06, 2	; 6
     486:	12 c0       	rjmp	.+36     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     488:	81 60       	ori	r24, 0x01	; 1
		bcopy(tmp,1,MD1i,MD1);
     48a:	4b 9b       	sbis	0x09, 3	; 9
     48c:	11 c0       	rjmp	.+34     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     48e:	82 60       	ori	r24, 0x02	; 2
		bcopy(tmp,2,MD2i,MD2);
     490:	31 9b       	sbis	0x06, 1	; 6
     492:	10 c0       	rjmp	.+32     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     494:	84 60       	ori	r24, 0x04	; 4
		bcopy(tmp,3,MD3i,MD3);
     496:	4c 9b       	sbis	0x09, 4	; 9
     498:	0f c0       	rjmp	.+30     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     49a:	88 60       	ori	r24, 0x08	; 8
		bcopy(tmp,4,MD4i,MD4);
     49c:	30 9b       	sbis	0x06, 0	; 6
     49e:	0e c0       	rjmp	.+28     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4a0:	80 61       	ori	r24, 0x10	; 16
		btns = tmp;
     4a2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <btns>
		sbi(MB0p,MB0);	// clear B0
     4a6:	5f 9a       	sbi	0x0b, 7	; 11
		cbi(MB1p,MB1);  // set B1
     4a8:	5e 98       	cbi	0x0b, 6	; 11
     4aa:	c6 cf       	rjmp	.-116    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		bcopy(tmp,0,MD0i,MD0);
     4ac:	8e 7f       	andi	r24, 0xFE	; 254
     4ae:	ed cf       	rjmp	.-38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		bcopy(tmp,1,MD1i,MD1);
     4b0:	8d 7f       	andi	r24, 0xFD	; 253
     4b2:	ee cf       	rjmp	.-36     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		bcopy(tmp,2,MD2i,MD2);
     4b4:	8b 7f       	andi	r24, 0xFB	; 251
     4b6:	ef cf       	rjmp	.-34     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		bcopy(tmp,3,MD3i,MD3);
     4b8:	87 7f       	andi	r24, 0xF7	; 247
     4ba:	f0 cf       	rjmp	.-32     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		bcopy(tmp,4,MD4i,MD4);
     4bc:	8f 7e       	andi	r24, 0xEF	; 239
     4be:	f1 cf       	rjmp	.-30     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	else if(mux_cycle == 2+LED_DEADTIME)
     4c0:	87 30       	cpi	r24, 0x07	; 7
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	3f c0       	rjmp	.+126    	; 0x544 <__stack+0x45>
		uint8_t tmp = btns;
     4c6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <btns>
		bcopy(tmp,5,MD0i,MD0);
     4ca:	32 9b       	sbis	0x06, 2	; 6
     4cc:	1f c0       	rjmp	.+62     	; 0x50c <__stack+0xd>
     4ce:	80 62       	ori	r24, 0x20	; 32
		bcopy(tmp,6,MD1i,MD1);
     4d0:	4b 9b       	sbis	0x09, 3	; 9
     4d2:	1e c0       	rjmp	.+60     	; 0x510 <__stack+0x11>
     4d4:	80 64       	ori	r24, 0x40	; 64
		bcopy(tmp,7,MD2i,MD2);
     4d6:	31 9b       	sbis	0x06, 1	; 6
     4d8:	1d c0       	rjmp	.+58     	; 0x514 <__stack+0x15>
     4da:	80 68       	ori	r24, 0x80	; 128
		btns = tmp;
     4dc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <btns>
		sbi(MB1p,MB1);	// clear B1
     4e0:	5e 9a       	sbi	0x0b, 6	; 11
		sbi(MD0d,MD0);	// mux port to outputs
     4e2:	3a 9a       	sbi	0x07, 2	; 7
		sbi(MD1d,MD1);
     4e4:	53 9a       	sbi	0x0a, 3	; 10
		sbi(MD2d,MD2);
     4e6:	39 9a       	sbi	0x07, 1	; 7
		sbi(MD3d,MD3);
     4e8:	54 9a       	sbi	0x0a, 4	; 10
		sbi(MD4d,MD4);
     4ea:	38 9a       	sbi	0x07, 0	; 7
		cbi(MD3p,MD3);
     4ec:	5c 98       	cbi	0x0b, 4	; 11
		cbi(MD2p,MD2);
     4ee:	41 98       	cbi	0x08, 1	; 8
		cbi(MD1p,MD1);
     4f0:	5b 98       	cbi	0x0b, 3	; 11
		cbi(MD0p,MD0);			
     4f2:	42 98       	cbi	0x08, 2	; 8
		if(ctrl.bias == 0)
     4f4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     4f8:	81 11       	cpse	r24, r1
     4fa:	0e c0       	rjmp	.+28     	; 0x518 <__stack+0x19>
			sbi(MD3p,MD3);
     4fc:	5c 9a       	sbi	0x0b, 4	; 11
		bcopy_v(MD4p,MD4, (!ctrl.range), 0);
     4fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ctrl+0x2>
     502:	81 11       	cpse	r24, r1
     504:	1d c0       	rjmp	.+58     	; 0x540 <__stack+0x41>
     506:	40 9a       	sbi	0x08, 0	; 8
		cbi(ML0p,ML0);  // set L0
     508:	2e 98       	cbi	0x05, 6	; 5
     50a:	96 cf       	rjmp	.-212    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		bcopy(tmp,5,MD0i,MD0);
     50c:	8f 7d       	andi	r24, 0xDF	; 223
     50e:	e0 cf       	rjmp	.-64     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		bcopy(tmp,6,MD1i,MD1);
     510:	8f 7b       	andi	r24, 0xBF	; 191
     512:	e1 cf       	rjmp	.-62     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		bcopy(tmp,7,MD2i,MD2);
     514:	8f 77       	andi	r24, 0x7F	; 127
     516:	e2 cf       	rjmp	.-60     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		else if(ctrl.bias == 1)
     518:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	11 f4       	brne	.+4      	; 0x524 <__stack+0x25>
			sbi(MD2p,MD2);
     520:	41 9a       	sbi	0x08, 1	; 8
     522:	ed cf       	rjmp	.-38     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		else if(ctrl.bias == 2)
     524:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	11 f4       	brne	.+4      	; 0x530 <__stack+0x31>
			sbi(MD1p,MD1);
     52c:	5b 9a       	sbi	0x0b, 3	; 11
     52e:	e7 cf       	rjmp	.-50     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		else if(ctrl.bias == 3)
     530:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	11 f4       	brne	.+4      	; 0x53c <__stack+0x3d>
			sbi(MD0p,MD0);
     538:	42 9a       	sbi	0x08, 2	; 8
     53a:	e1 cf       	rjmp	.-62     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
			sbi(MD3p,MD3);
     53c:	5c 9a       	sbi	0x0b, 4	; 11
     53e:	fc cf       	rjmp	.-8      	; 0x538 <__stack+0x39>
		bcopy_v(MD4p,MD4, (!ctrl.range), 0);
     540:	40 98       	cbi	0x08, 0	; 8
     542:	e2 cf       	rjmp	.-60     	; 0x508 <__stack+0x9>
	else if(mux_cycle == 2 + LED_DEADTIME + LED_CYCLES)
     544:	88 30       	cpi	r24, 0x08	; 8
     546:	09 f0       	breq	.+2      	; 0x54a <__stack+0x4b>
     548:	77 cf       	rjmp	.-274    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		sbi(ML0p,ML0);	// clear L0
     54a:	2e 9a       	sbi	0x05, 6	; 5
		bcopy_v(MD0p,MD0, ctrl.range, 0);
     54c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ctrl+0x2>
     550:	80 ff       	sbrs	r24, 0
     552:	17 c0       	rjmp	.+46     	; 0x582 <__stack+0x83>
     554:	42 9a       	sbi	0x08, 2	; 8
		bcopy_v(MD1p,MD1, !ctrl.ind, 0);
     556:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ctrl+0x1>
     55a:	81 11       	cpse	r24, r1
     55c:	14 c0       	rjmp	.+40     	; 0x586 <__stack+0x87>
     55e:	5b 9a       	sbi	0x0b, 3	; 11
		bcopy_v(MD2p,MD2,  ctrl.ind, 0);
     560:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ctrl+0x1>
     564:	80 ff       	sbrs	r24, 0
     566:	11 c0       	rjmp	.+34     	; 0x58a <__stack+0x8b>
     568:	41 9a       	sbi	0x08, 1	; 8
		bcopy_v(MD3p,MD3, ctrl.com, 0);
     56a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ctrl+0x3>
     56e:	80 ff       	sbrs	r24, 0
     570:	0e c0       	rjmp	.+28     	; 0x58e <__stack+0x8f>
     572:	5c 9a       	sbi	0x0b, 4	; 11
		bcopy_v(MD4p,MD4, ctrl.power, 0);
     574:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     578:	80 ff       	sbrs	r24, 0
     57a:	0b c0       	rjmp	.+22     	; 0x592 <__stack+0x93>
     57c:	40 9a       	sbi	0x08, 0	; 8
		cbi(ML1p,ML1);  // set L1
     57e:	5d 98       	cbi	0x0b, 5	; 11
     580:	5b cf       	rjmp	.-330    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		bcopy_v(MD0p,MD0, ctrl.range, 0);
     582:	42 98       	cbi	0x08, 2	; 8
     584:	e8 cf       	rjmp	.-48     	; 0x556 <__stack+0x57>
		bcopy_v(MD1p,MD1, !ctrl.ind, 0);
     586:	5b 98       	cbi	0x0b, 3	; 11
     588:	eb cf       	rjmp	.-42     	; 0x560 <__stack+0x61>
		bcopy_v(MD2p,MD2,  ctrl.ind, 0);
     58a:	41 98       	cbi	0x08, 1	; 8
     58c:	ee cf       	rjmp	.-36     	; 0x56a <__stack+0x6b>
		bcopy_v(MD3p,MD3, ctrl.com, 0);
     58e:	5c 98       	cbi	0x0b, 4	; 11
     590:	f1 cf       	rjmp	.-30     	; 0x574 <__stack+0x75>
		bcopy_v(MD4p,MD4, ctrl.power, 0);
     592:	40 98       	cbi	0x08, 0	; 8
     594:	f4 cf       	rjmp	.-24     	; 0x57e <__stack+0x7f>
		mux_cycle = 0;	// mux done
     596:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mux_cycle.2430>
		btns_down |= ((btns^btns_old)&(~btns));
     59a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <btns>
     59e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <btns>
     5a2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
     5a6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <btns_old.2431>
     5aa:	93 27       	eor	r25, r19
     5ac:	80 95       	com	r24
     5ae:	89 23       	and	r24, r25
     5b0:	82 2b       	or	r24, r18
     5b2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		btns_old = btns;
     5b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <btns>
     5ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <btns_old.2431>
     5be:	44 cf       	rjmp	.-376    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		time_div = 0;
     5c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <time_div.2434>
		if(timeout)
     5c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timeout>
     5c8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timeout+0x1>
     5cc:	89 2b       	or	r24, r25
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__stack+0xd3>
     5d0:	44 cf       	rjmp	.-376    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			timeout--;
     5d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timeout>
     5d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timeout+0x1>
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timeout+0x1>
     5e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timeout>
}
     5e4:	3a cf       	rjmp	.-396    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

000005e6 <i2c_wait>:
#define i2c_data_out(data)	TWDR = (data); TWCR = (1<<TWINT) | (1<<TWEN)

// wait for I2C state change with timout (ISR must be enabled!)
uint8_t i2c_wait(uint16_t timeout_ms)
{
	if(timeout_ms)
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	49 f0       	breq	.+18     	; 0x5fc <i2c_wait+0x16>
	{
		// timeout mode
		timeout_set(timeout_ms);	
     5ea:	f0 de       	rcall	.-544    	; 0x3cc <timeout_set>
		while(!bit_is_set(TWCR,TWINT) && !timeout_done());
     5ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     5f0:	87 fd       	sbrc	r24, 7
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <i2c_wait+0x14>
     5f4:	f4 de       	rcall	.-536    	; 0x3de <timeout_done>
     5f6:	88 23       	and	r24, r24
     5f8:	c9 f3       	breq	.-14     	; 0x5ec <i2c_wait+0x6>
		return(timeout_done());
     5fa:	f1 ce       	rjmp	.-542    	; 0x3de <timeout_done>
	}
	else
		while(!bit_is_set(TWCR,TWINT)); // no timeout mode
     5fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     600:	87 ff       	sbrs	r24, 7
     602:	fc cf       	rjmp	.-8      	; 0x5fc <i2c_wait+0x16>

	return(0);
}
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret

00000608 <i2c_write_data>:

// I2C write routine with timeouts (ISR must be enabled)
uint8_t i2c_write_data(uint8_t address,uint8_t *data,uint8_t count,uint16_t timeout_ms)
{
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	c8 2f       	mov	r28, r24
     61a:	c6 2e       	mov	r12, r22
     61c:	f7 2e       	mov	r15, r23
     61e:	e4 2e       	mov	r14, r20
     620:	d2 2f       	mov	r29, r18
     622:	d3 2e       	mov	r13, r19
	// start
	i2c_start();	
     624:	84 ea       	ldi	r24, 0xA4	; 164
     626:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	if(i2c_wait(timeout_ms))
     62a:	82 2f       	mov	r24, r18
     62c:	93 2f       	mov	r25, r19
     62e:	db df       	rcall	.-74     	; 0x5e6 <i2c_wait>
     630:	88 23       	and	r24, r24
     632:	71 f0       	breq	.+28     	; 0x650 <i2c_write_data+0x48>
		i2c_stop();
		return(1);
	}	
	if((TW_STATUS) != TW_START)
	{
		i2c_stop();
     634:	84 e9       	ldi	r24, 0x94	; 148
     636:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
		return(1);
     63a:	c1 e0       	ldi	r28, 0x01	; 1
	// stop
	i2c_stop();

	
	return(0);
}
     63c:	8c 2f       	mov	r24, r28
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret
	if((TW_STATUS) != TW_START)
     650:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     654:	88 7f       	andi	r24, 0xF8	; 248
     656:	88 30       	cpi	r24, 0x08	; 8
     658:	69 f7       	brne	.-38     	; 0x634 <i2c_write_data+0x2c>
	i2c_data_out(address<<1);
     65a:	cc 0f       	add	r28, r28
     65c:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
     660:	84 e8       	ldi	r24, 0x84	; 132
     662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	if(i2c_wait(timeout_ms))
     666:	8d 2f       	mov	r24, r29
     668:	9d 2d       	mov	r25, r13
     66a:	bd df       	rcall	.-134    	; 0x5e6 <i2c_wait>
     66c:	c8 2f       	mov	r28, r24
     66e:	88 23       	and	r24, r24
     670:	29 f0       	breq	.+10     	; 0x67c <i2c_write_data+0x74>
		i2c_stop();
     672:	84 e9       	ldi	r24, 0x94	; 148
     674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
		return(2);		
     678:	c2 e0       	ldi	r28, 0x02	; 2
     67a:	e0 cf       	rjmp	.-64     	; 0x63c <i2c_write_data+0x34>
	if((TW_STATUS) != TW_MT_SLA_ACK)
     67c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     680:	88 7f       	andi	r24, 0xF8	; 248
     682:	88 31       	cpi	r24, 0x18	; 24
     684:	b1 f7       	brne	.-20     	; 0x672 <i2c_write_data+0x6a>
     686:	0c 2d       	mov	r16, r12
     688:	1f 2d       	mov	r17, r15
     68a:	e0 0e       	add	r14, r16
     68c:	f1 2e       	mov	r15, r17
     68e:	f1 1c       	adc	r15, r1
		i2c_data_out(data[k]);
     690:	84 e8       	ldi	r24, 0x84	; 132
     692:	c8 2e       	mov	r12, r24
	for(uint8_t k = 0;k < count;k++) 
     694:	e0 16       	cp	r14, r16
     696:	f1 06       	cpc	r15, r17
     698:	21 f4       	brne	.+8      	; 0x6a2 <i2c_write_data+0x9a>
	i2c_stop();
     69a:	84 e9       	ldi	r24, 0x94	; 148
     69c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	return(0);
     6a0:	cd cf       	rjmp	.-102    	; 0x63c <i2c_write_data+0x34>
		i2c_data_out(data[k]);
     6a2:	f8 01       	movw	r30, r16
     6a4:	81 91       	ld	r24, Z+
     6a6:	8f 01       	movw	r16, r30
     6a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
     6ac:	c0 92 bc 00 	sts	0x00BC, r12	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
		if(i2c_wait(timeout_ms))		
     6b0:	8d 2f       	mov	r24, r29
     6b2:	9d 2d       	mov	r25, r13
     6b4:	98 df       	rcall	.-208    	; 0x5e6 <i2c_wait>
     6b6:	88 23       	and	r24, r24
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <i2c_write_data+0xbc>
			i2c_stop();
     6ba:	84 e9       	ldi	r24, 0x94	; 148
     6bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
			return(3);			
     6c0:	c3 e0       	ldi	r28, 0x03	; 3
     6c2:	bc cf       	rjmp	.-136    	; 0x63c <i2c_write_data+0x34>
		if((TW_STATUS) != TW_MT_DATA_ACK)
     6c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     6c8:	88 7f       	andi	r24, 0xF8	; 248
     6ca:	88 32       	cpi	r24, 0x28	; 40
     6cc:	19 f3       	breq	.-58     	; 0x694 <i2c_write_data+0x8c>
     6ce:	f5 cf       	rjmp	.-22     	; 0x6ba <i2c_write_data+0xb2>

000006d0 <LTC2631_init>:
// timeout in case I2C fails [ms]
#define I2C_TIMEOUT 3000

// initialization of DAC
uint8_t LTC2631_init(uint8_t address)
{
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <LTC2631_init+0x6>
     6d6:	0f 92       	push	r0
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[3] = {0,0,0};
     6dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     6e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     6e4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     6e8:	29 83       	std	Y+1, r18	; 0x01
     6ea:	3a 83       	std	Y+2, r19	; 0x02
     6ec:	4b 83       	std	Y+3, r20	; 0x03
	data[0] = 0x60;
     6ee:	90 e6       	ldi	r25, 0x60	; 96
     6f0:	99 83       	std	Y+1, r25	; 0x01
	return(i2c_write_data(address, data, 3, I2C_TIMEOUT));
     6f2:	28 eb       	ldi	r18, 0xB8	; 184
     6f4:	3b e0       	ldi	r19, 0x0B	; 11
     6f6:	43 e0       	ldi	r20, 0x03	; 3
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	84 df       	rcall	.-248    	; 0x608 <i2c_write_data>
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <LTC2631_set>:

// set DAC value
uint8_t LTC2631_set(uint8_t address, uint16_t value)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <LTC2631_set+0x6>
     712:	0f 92       	push	r0
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9b 01       	movw	r18, r22
	uint8_t data[3];

	// build command
	data[0] = 0x30;	// write and set
     71a:	90 e3       	ldi	r25, 0x30	; 48
     71c:	99 83       	std	Y+1, r25	; 0x01
	data[1] = (uint8_t)(value>>4);
     71e:	ab 01       	movw	r20, r22
     720:	94 e0       	ldi	r25, 0x04	; 4
     722:	56 95       	lsr	r21
     724:	47 95       	ror	r20
     726:	9a 95       	dec	r25
     728:	e1 f7       	brne	.-8      	; 0x722 <LTC2631_set+0x16>
     72a:	4a 83       	std	Y+2, r20	; 0x02
	data[2] = (uint8_t)((value<<4)&0x00F0u);
     72c:	22 95       	swap	r18
     72e:	20 7f       	andi	r18, 0xF0	; 240
     730:	2b 83       	std	Y+3, r18	; 0x03
	
	// send it
	return(i2c_write_data(address, data, 3, I2C_TIMEOUT));
     732:	28 eb       	ldi	r18, 0xB8	; 184
     734:	3b e0       	ldi	r19, 0x0B	; 11
     736:	43 e0       	ldi	r20, 0x03	; 3
     738:	be 01       	movw	r22, r28
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	64 df       	rcall	.-312    	; 0x608 <i2c_write_data>
}
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <__vector_18>:
		*addr = &buf[0]; // wrap around buffer
}

// USART ISR
ISR(USART_RX_vect)
{
     74c:	1f 92       	push	r1
     74e:	1f b6       	in	r1, 0x3f	; 63
     750:	1f 92       	push	r1
     752:	11 24       	eor	r1, r1
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
	//sei();

	char *ptr = (char*)rxd_ptr; // work with local copy - faster
	
	// read byte
	char dbyte = UDR0;
     75c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	
	// store data byte
	*ptr++ = dbyte;
     760:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <rxd_ptr>
     764:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <rxd_ptr+0x1>
     768:	81 93       	st	Z+, r24
	if(*addr >= &buf[RX_BUF_SZ])
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	e6 3a       	cpi	r30, 0xA6	; 166
     76e:	f9 07       	cpc	r31, r25
     770:	10 f0       	brcs	.+4      	; 0x776 <__vector_18+0x2a>
		*addr = &buf[0]; // wrap around buffer
     772:	e6 e2       	ldi	r30, 0x26	; 38
     774:	f1 e0       	ldi	r31, 0x01	; 1
	serial_fifo_wrap(rxd,&ptr);
	*ptr = '\0';
     776:	10 82       	st	Z, r1
		
	// detect command end
	if(dbyte == '\n' || dbyte == ';')
     778:	8a 30       	cpi	r24, 0x0A	; 10
     77a:	11 f0       	breq	.+4      	; 0x780 <__vector_18+0x34>
     77c:	8b 33       	cpi	r24, 0x3B	; 59
     77e:	29 f4       	brne	.+10     	; 0x78a <__vector_18+0x3e>
		rxd_stat++;
     780:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxd_stat>
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rxd_stat>

	rxd_ptr = ptr; // store back local write pointer
     78a:	f0 93 25 01 	sts	0x0125, r31	; 0x800125 <rxd_ptr+0x1>
     78e:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <rxd_ptr>
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	1f 90       	pop	r1
     79c:	1f be       	out	0x3f, r1	; 63
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <serial_init>:

// init USART
void serial_init(void)
{
	// init RX/TX
	UCSR0A = (1<<U2X0);
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
     7a8:	88 e9       	ldi	r24, 0x98	; 152
     7aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
	UCSR0C = (0<<UMSEL00) | (0<<UPM00) | (0<<USBS0) | (3<<UCSZ00);
     7ae:	86 e0       	ldi	r24, 0x06	; 6
     7b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	UBRR0 = (uint16_t)((F_CPU/(USART_BAUDRATE*8ul)) - 1);
     7b4:	8c e0       	ldi	r24, 0x0C	; 12
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     7bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>

	rxd[0] = '\0';
     7c0:	e6 e2       	ldi	r30, 0x26	; 38
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	10 82       	st	Z, r1
	rxd_ptr = &rxd[0]; // write pointer
     7c6:	f0 93 25 01 	sts	0x0125, r31	; 0x800125 <rxd_ptr+0x1>
     7ca:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <rxd_ptr>
	rxd_read = &rxd[0]; // read pointer
     7ce:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <rxd_read+0x1>
     7d2:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <rxd_read>
	rxd_stat = 0; // no command yet
     7d6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <rxd_stat>
}
     7da:	08 95       	ret

000007dc <serial_decode>:

// decode command, supports following format:
//  "my:command:or:whatver[<space(s)>parameter]"
uint8_t serial_decode(char *cbuf,char **par)
{
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	8c 01       	movw	r16, r24
     7e6:	ab 01       	movw	r20, r22
    cli();
     7e8:	f8 94       	cli
	// check command completness
	int8_t count = 0;
	int8_t stat;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		stat = rxd_stat;
     7ea:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxd_stat>
    sei();
     7ee:	78 94       	sei
	}
	if(stat < 1)
     7f0:	18 16       	cp	r1, r24
     7f2:	0c f0       	brlt	.+2      	; 0x7f6 <serial_decode+0x1a>
     7f4:	4e c0       	rjmp	.+156    	; 0x892 <serial_decode+0xb6>
	
	// we have command in buffer - quickly copy it to secondary buffer
	
	// command buffer pointer
	char *com = cbuf;
	*com = '\0';
     7f6:	e8 01       	movw	r28, r16
     7f8:	18 82       	st	Y, r1

	// rx buffer read pointer
	char *ptr = (char*)rxd_read;
     7fa:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <rxd_read>
     7fe:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <rxd_read+0x1>

	// no parameter detected yet
	*par = NULL;
     802:	fb 01       	movw	r30, r22
     804:	11 82       	std	Z+1, r1	; 0x01
     806:	10 82       	st	Z, r1
	char *com = cbuf;
     808:	90 2f       	mov	r25, r16
     80a:	81 2f       	mov	r24, r17

	// end of command reached?
	uint8_t is_end = 0;
     80c:	30 e0       	ldi	r19, 0x00	; 0
	int8_t count = 0;
     80e:	60 e0       	ldi	r22, 0x00	; 0

	while(1)
	{
		// get RX byte
		char db = *ptr;		
     810:	2c 91       	ld	r18, X

		if(db == ' ')
     812:	20 32       	cpi	r18, 0x20	; 32
     814:	b1 f4       	brne	.+44     	; 0x842 <serial_decode+0x66>
		{
			// parameter separator
			*com++ = '\0';		
     816:	e9 2f       	mov	r30, r25
     818:	f8 2f       	mov	r31, r24
     81a:	11 92       	st	Z+, r1

			// return parameter poiner
			*par = com;
     81c:	ea 01       	movw	r28, r20
     81e:	f9 83       	std	Y+1, r31	; 0x01
     820:	e8 83       	st	Y, r30
			
			// skip parameter separator(s)
			while(*ptr == ' ')
     822:	cd 01       	movw	r24, r26
     824:	06 c0       	rjmp	.+12     	; 0x832 <serial_decode+0x56>
		*addr = &buf[0]; // wrap around buffer
     826:	a6 e2       	ldi	r26, 0x26	; 38
     828:	b1 e0       	ldi	r27, 0x01	; 1
	if(*addr >= &buf[RX_BUF_SZ])
     82a:	d1 e0       	ldi	r29, 0x01	; 1
     82c:	86 3a       	cpi	r24, 0xA6	; 166
     82e:	9d 07       	cpc	r25, r29
     830:	c0 f7       	brcc	.-16     	; 0x822 <serial_decode+0x46>
     832:	dc 01       	movw	r26, r24
			while(*ptr == ' ')
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	2c 91       	ld	r18, X
     838:	20 32       	cpi	r18, 0x20	; 32
     83a:	a9 f3       	breq	.-22     	; 0x826 <serial_decode+0x4a>
		*addr = &buf[0]; // wrap around buffer
     83c:	9e 2f       	mov	r25, r30
     83e:	8f 2f       	mov	r24, r31
     840:	e7 cf       	rjmp	.-50     	; 0x810 <serial_decode+0x34>
				serial_fifo_wrap(rxd,&ptr);
			}
			
			continue;			
		}
		else if(db == ';' || db == '\n' || db == '\r')
     842:	2b 33       	cpi	r18, 0x3B	; 59
     844:	91 f0       	breq	.+36     	; 0x86a <serial_decode+0x8e>
     846:	2a 30       	cpi	r18, 0x0A	; 10
     848:	81 f0       	breq	.+32     	; 0x86a <serial_decode+0x8e>
     84a:	2d 30       	cpi	r18, 0x0D	; 13
     84c:	81 f4       	brne	.+32     	; 0x86e <serial_decode+0x92>
			if(db != '\r')
				count++;
			
			// end of command
			if(!is_end)
				*com++ = '\0';
     84e:	e9 2f       	mov	r30, r25
     850:	f8 2f       	mov	r31, r24
			if(!is_end)
     852:	31 11       	cpse	r19, r1
     854:	02 c0       	rjmp	.+4      	; 0x85a <serial_decode+0x7e>
				*com++ = '\0';
     856:	11 92       	st	Z+, r1
			
			// end of command reached, but check if there is additional rubbish after
			is_end = 1;			
     858:	31 e0       	ldi	r19, 0x01	; 1
			// copy command data
			*com++ = db;
		}
		
		// move to next RX byte
		ptr++;
     85a:	11 96       	adiw	r26, 0x01	; 1
	if(*addr >= &buf[RX_BUF_SZ])
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	a6 3a       	cpi	r26, 0xA6	; 166
     860:	b2 07       	cpc	r27, r18
     862:	60 f3       	brcs	.-40     	; 0x83c <serial_decode+0x60>
		*addr = &buf[0]; // wrap around buffer
     864:	a6 e2       	ldi	r26, 0x26	; 38
     866:	b1 e0       	ldi	r27, 0x01	; 1
     868:	e9 cf       	rjmp	.-46     	; 0x83c <serial_decode+0x60>
				count++;
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	f0 cf       	rjmp	.-32     	; 0x84e <serial_decode+0x72>
		else if(is_end)
     86e:	33 23       	and	r19, r19
     870:	b1 f0       	breq	.+44     	; 0x89e <serial_decode+0xc2>
			rxd_read = ptr; // store next command read position
     872:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <rxd_read+0x1>
     876:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <rxd_read>
    cli();
     87a:	f8 94       	cli
	}

	// update new command events count
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		rxd_stat -= count;
     87c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxd_stat>
     880:	86 1b       	sub	r24, r22
     882:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rxd_stat>
    sei();
     886:	78 94       	sei
	}
	
	return(cbuf[0] != '\0'); // command detected
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	f8 01       	movw	r30, r16
     88c:	90 81       	ld	r25, Z
     88e:	91 11       	cpse	r25, r1
     890:	01 c0       	rjmp	.+2      	; 0x894 <serial_decode+0xb8>
		return(0); // no command yet - get out
     892:	80 e0       	ldi	r24, 0x00	; 0
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret
			*com++ = db;
     89e:	e9 2f       	mov	r30, r25
     8a0:	f8 2f       	mov	r31, r24
     8a2:	21 93       	st	Z+, r18
     8a4:	da cf       	rjmp	.-76     	; 0x85a <serial_decode+0x7e>

000008a6 <serial_tx_byte>:

// send byte
void serial_tx_byte(uint8_t byte)
{
	loop_until_bit_is_set(UCSR0A,UDRE0);
     8a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     8aa:	95 ff       	sbrs	r25, 5
     8ac:	fc cf       	rjmp	.-8      	; 0x8a6 <serial_tx_byte>
	UDR0 = byte;
     8ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
}
     8b2:	08 95       	ret

000008b4 <serial_tx_wait>:

// wait TX done
void serial_tx_wait(void)
{
	loop_until_bit_is_set(UCSR0A,TXC0);
     8b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     8b8:	86 ff       	sbrs	r24, 6
     8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <serial_tx_wait>
}
     8bc:	08 95       	ret

000008be <serial_tx_cstr>:

// send string from progmem
void serial_tx_cstr(const char *str)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
	char byte;
	while((byte = pgm_read_byte(str++)) != '\0')
     8c4:	fe 01       	movw	r30, r28
     8c6:	84 91       	lpm	r24, Z
     8c8:	21 96       	adiw	r28, 0x01	; 1
     8ca:	81 11       	cpse	r24, r1
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <serial_tx_cstr+0x1e>
	{
		sbi(UCSR0A,TXC0);
		serial_tx_byte(byte);
	}
	loop_until_bit_is_set(UCSR0A,TXC0);		
     8ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     8d2:	86 ff       	sbrs	r24, 6
     8d4:	fc cf       	rjmp	.-8      	; 0x8ce <serial_tx_cstr+0x10>
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret
		sbi(UCSR0A,TXC0);
     8dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
     8e0:	90 64       	ori	r25, 0x40	; 64
     8e2:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
		serial_tx_byte(byte);
     8e6:	df df       	rcall	.-66     	; 0x8a6 <serial_tx_byte>
     8e8:	ed cf       	rjmp	.-38     	; 0x8c4 <serial_tx_cstr+0x6>

000008ea <serial_tx_str>:

// send string from progmem
void serial_tx_str(char *str)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
	char byte;
	while((byte = *str++) != '\0')
     8ee:	ec 01       	movw	r28, r24
     8f0:	89 91       	ld	r24, Y+
     8f2:	81 11       	cpse	r24, r1
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <serial_tx_str+0x12>
		serial_tx_byte(byte);
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret
		serial_tx_byte(byte);
     8fc:	d4 df       	rcall	.-88     	; 0x8a6 <serial_tx_byte>
	while((byte = *str++) != '\0')
     8fe:	ce 01       	movw	r24, r28
     900:	f6 cf       	rjmp	.-20     	; 0x8ee <serial_tx_str+0x4>

00000902 <serial_error>:
{
	static uint16_t err_mem = 0;
	static char *info_mem = NULL;
	
	// remember last error
	if(mode&SCPI_ERR_STORE)
     902:	40 ff       	sbrs	r20, 0
     904:	08 c0       	rjmp	.+16     	; 0x916 <serial_error+0x14>
	{
		err_mem = err;
     906:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <err_mem.2019>
     90a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <err_mem.2019+0x1>
		info_mem = (char*)info;
     90e:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <info_mem.2020>
     912:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <info_mem.2020+0x1>
	}

	if(mode&SCPI_ERR_SEND)
     916:	41 ff       	sbrs	r20, 1
     918:	20 c0       	rjmp	.+64     	; 0x95a <serial_error+0x58>
	{
		switch(err_mem)
     91a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <err_mem.2019>
     91e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <err_mem.2019+0x1>
     922:	8f 38       	cpi	r24, 0x8F	; 143
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	92 07       	cpc	r25, r18
     928:	19 f1       	breq	.+70     	; 0x970 <serial_error+0x6e>
     92a:	c0 f4       	brcc	.+48     	; 0x95c <serial_error+0x5a>
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	51 f1       	breq	.+84     	; 0x984 <serial_error+0x82>
     930:	8e 3f       	cpi	r24, 0xFE	; 254
     932:	9e 4f       	sbci	r25, 0xFE	; 254
     934:	21 f1       	breq	.+72     	; 0x97e <serial_error+0x7c>
				serial_tx_cstr(PSTR("0, No error.")); break;
			default:
				break;

		}
		if(info_mem)
     936:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <info_mem.2020>
     93a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <info_mem.2020+0x1>
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	09 f0       	breq	.+2      	; 0x944 <serial_error+0x42>
			serial_tx_cstr(info_mem);
     942:	bd df       	rcall	.-134    	; 0x8be <serial_tx_cstr>
		serial_tx_cstr(PSTR("\n"));
     944:	8c e2       	ldi	r24, 0x2C	; 44
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	ba df       	rcall	.-140    	; 0x8be <serial_tx_cstr>

		err_mem = 0;
     94a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <err_mem.2019+0x1>
     94e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <err_mem.2019>
		info_mem = NULL;
     952:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <info_mem.2020+0x1>
     956:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <info_mem.2020>
	}
	
}
     95a:	08 95       	ret
		switch(err_mem)
     95c:	83 39       	cpi	r24, 0x93	; 147
     95e:	2f ef       	ldi	r18, 0xFF	; 255
     960:	92 07       	cpc	r25, r18
     962:	51 f0       	breq	.+20     	; 0x978 <serial_error+0x76>
     964:	88 39       	cpi	r24, 0x98	; 152
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	31 f7       	brne	.-52     	; 0x936 <serial_error+0x34>
				serial_tx_cstr(PSTR("-104, Wrong parameter type or value.")); break;
     96a:	83 e7       	ldi	r24, 0x73	; 115
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	02 c0       	rjmp	.+4      	; 0x974 <serial_error+0x72>
				serial_tx_cstr(PSTR("-113, Undefined command header.")); break;
     970:	88 e9       	ldi	r24, 0x98	; 152
     972:	92 e0       	ldi	r25, 0x02	; 2
				serial_tx_cstr(PSTR("0, No error.")); break;
     974:	a4 df       	rcall	.-184    	; 0x8be <serial_tx_cstr>
     976:	df cf       	rjmp	.-66     	; 0x936 <serial_error+0x34>
				serial_tx_cstr(PSTR("-109, Missing parameters.")); break;
     978:	89 e5       	ldi	r24, 0x59	; 89
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	fb cf       	rjmp	.-10     	; 0x974 <serial_error+0x72>
				serial_tx_cstr(PSTR("-258, EEPROM write protected.")); break;
     97e:	8b e3       	ldi	r24, 0x3B	; 59
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	f8 cf       	rjmp	.-16     	; 0x974 <serial_error+0x72>
				serial_tx_cstr(PSTR("0, No error.")); break;
     984:	8e e2       	ldi	r24, 0x2E	; 46
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	f5 cf       	rjmp	.-22     	; 0x974 <serial_error+0x72>

0000098a <main>:
#define CMD_PWR_WAIT 3 // wait for power DAC response
#define CMD_ACK 4 // send remote command ACK after command executed


int main(void)
{
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	c0 59       	subi	r28, 0x90	; 144
     990:	d1 09       	sbc	r29, r1
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
	// disable WDT if enabled (sometimes it fucks up ...)
	MCUSR = 0;
     99c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	a8 95       	wdr
     9a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     9a8:	88 61       	ori	r24, 0x18	; 24
     9aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     9ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     9b2:	0f be       	out	0x3f, r0	; 63
  	wdt_disable();

	// disable all ports
	DDRB = 0x00;
     9b4:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
     9b6:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
     9b8:	1a b8       	out	0x0a, r1	; 10

	// enable MUX common lines
	sbi(MB0d,MB0);
     9ba:	57 9a       	sbi	0x0a, 7	; 10
	sbi(MB1d,MB1);
     9bc:	56 9a       	sbi	0x0a, 6	; 10
	sbi(ML0d,ML0);
     9be:	26 9a       	sbi	0x04, 6	; 4
	sbi(ML1d,ML1);
     9c0:	55 9a       	sbi	0x0a, 5	; 10

	// power bias state
	sbi(PBIASd,PBIAS);
     9c2:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PBIASp,PBIAS);
     9c4:	5a 9a       	sbi	0x0b, 2	; 11

	// FAN to LOW
	sbi(PFANd,PFAN);
     9c6:	3b 9a       	sbi	0x07, 3	; 7
	cbi(PFANp,PFAN);
     9c8:	43 98       	cbi	0x08, 3	; 8
	
	// timer 0 tick
	TCCR0A = (2<<WGM00);
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (2<<CS00);
     9ce:	85 bd       	out	0x25, r24	; 37
	OCR0A = (uint8_t)(F_CPU/8.0*MTICK) - 1;
     9d0:	8d e3       	ldi	r24, 0x3D	; 61
     9d2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     9d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>

	// I2C as master
	TWCR = (1<<TWEN)|(1<<TWEA);
     9de:	84 e4       	ldi	r24, 0x44	; 68
     9e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	TWBR = (uint8_t)((F_CPU - 16.0*I2C_FREQ)/(2.0*I2C_FREQ));
     9e4:	8a e2       	ldi	r24, 0x2A	; 42
     9e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
	TWSR = (0<<TWPS0);
     9ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
	PORTC |= (1<<PC4) | (1<<PC5);
     9ee:	88 b1       	in	r24, 0x08	; 8
     9f0:	80 63       	ori	r24, 0x30	; 48
     9f2:	88 b9       	out	0x08, r24	; 8

	// clear states
	ctrl.bias = 0;
     9f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ctrl>
	ctrl.ind = 0;
     9f8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ctrl+0x1>
	ctrl.range = 0;
     9fc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ctrl+0x2>
	ctrl.com = 0;
     a00:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ctrl+0x3>
	ctrl.power = 0;
     a04:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ctrl+0x4>
	ctrl.bias_pwr = 0;
     a08:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ctrl+0x6>
     a0c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ctrl+0x5>
	ctrl.bias_pot = 0;
     a10:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ctrl+0x8>
     a14:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ctrl+0x7>

	// init UART
	serial_init();
     a18:	c4 de       	rcall	.-632    	; 0x7a2 <serial_init>

	// init SPI for relay driver
	spec_relay_init();
     a1a:	7c dc       	rcall	.-1800   	; 0x314 <spec_relay_init>
		
	// enable ISR
	sei();
     a1c:	78 94       	sei

	// put relays to default state
	set_relays(&ctrl,1);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	89 e1       	ldi	r24, 0x19	; 25
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	89 dc       	rcall	.-1774   	; 0x338 <set_relays>
	
	// default voltage set
	#define u2dac(voltage) ((uint16_t)(4095.0*voltage/5.0))
	uint16_t volts[4] = {u2dac(0.0), u2dac(3.0), u2dac(4.0), u2dac(5.0)};
     a26:	88 e0       	ldi	r24, 0x08	; 8
     a28:	e3 e0       	ldi	r30, 0x03	; 3
     a2a:	f1 e0       	ldi	r31, 0x01	; 1
     a2c:	de 01       	movw	r26, r28
     a2e:	af 57       	subi	r26, 0x7F	; 127
     a30:	bf 4f       	sbci	r27, 0xFF	; 255
     a32:	01 90       	ld	r0, Z+
     a34:	0d 92       	st	X+, r0
     a36:	8a 95       	dec	r24
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0xa8>
					uint16_t mvlev = atol(par);
					if(mvlev > 5000)
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Maximum supported level is 5000mV."),SCPI_ERR_STORE); // invalid range

					// custom bias set
					ctrl.bias = -1;
     a3a:	1f ef       	ldi	r17, 0xFF	; 255
					
					// set new voltages to both sources
					ctrl.bias_pwr = (uint16_t)(((uint32_t)mvlev*4095ul)/5000ul);
     a3c:	88 e8       	ldi	r24, 0x88	; 136
     a3e:	88 2e       	mov	r8, r24
     a40:	83 e1       	ldi	r24, 0x13	; 19
     a42:	98 2e       	mov	r9, r24
     a44:	a1 2c       	mov	r10, r1
     a46:	b1 2c       	mov	r11, r1
		uint8_t modf = 0;
     a48:	c4 57       	subi	r28, 0x74	; 116
     a4a:	df 4f       	sbci	r29, 0xFF	; 255
     a4c:	18 82       	st	Y, r1
     a4e:	cc 58       	subi	r28, 0x8C	; 140
     a50:	d0 40       	sbci	r29, 0x00	; 0
    cli();
     a52:	f8 94       	cli
			flags = btns_down;
     a54:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     a58:	c5 57       	subi	r28, 0x75	; 117
     a5a:	df 4f       	sbci	r29, 0xFF	; 255
     a5c:	88 83       	st	Y, r24
     a5e:	cb 58       	subi	r28, 0x8B	; 139
     a60:	d0 40       	sbci	r29, 0x00	; 0
			btns_down = 0x00;
     a62:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
    sei();
     a66:	78 94       	sei
		if(bit_is_set(flags,BTN_BIAS))
     a68:	c5 57       	subi	r28, 0x75	; 117
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	88 81       	ld	r24, Y
     a6e:	cb 58       	subi	r28, 0x8B	; 139
     a70:	d0 40       	sbci	r29, 0x00	; 0
     a72:	80 ff       	sbrs	r24, 0
     a74:	50 c0       	rjmp	.+160    	; 0xb16 <main+0x18c>
			ctrl.bias++;
     a76:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ctrl>
			if(ctrl.bias > 3)
     a80:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ctrl>
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	14 f0       	brlt	.+4      	; 0xa8c <main+0x102>
				ctrl.bias = 0;	
     a88:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ctrl>
			ctrl.bias_pot = volts[ctrl.bias];
     a8c:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <ctrl>
     a90:	ee 0f       	add	r30, r30
     a92:	ff 0b       	sbc	r31, r31
     a94:	81 e8       	ldi	r24, 0x81	; 129
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	8c 0f       	add	r24, r28
     a9a:	9d 1f       	adc	r25, r29
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ctrl+0x8>
     aa8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ctrl+0x7>
			ctrl.bias_pwr = ctrl.bias_pot;
     aac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ctrl+0x7>
     ab0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ctrl+0x8>
     ab4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ctrl+0x6>
     ab8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ctrl+0x5>
			modf |= (1<<CMD_POT) | (1<<CMD_PWR);
     abc:	c4 57       	subi	r28, 0x74	; 116
     abe:	df 4f       	sbci	r29, 0xFF	; 255
     ac0:	88 81       	ld	r24, Y
     ac2:	cc 58       	subi	r28, 0x8C	; 140
     ac4:	d0 40       	sbci	r29, 0x00	; 0
     ac6:	86 60       	ori	r24, 0x06	; 6
			sbi(modf,CMD_RELAYS);
     ac8:	c4 57       	subi	r28, 0x74	; 116
     aca:	df 4f       	sbci	r29, 0xFF	; 255
     acc:	88 83       	st	Y, r24
     ace:	cc 58       	subi	r28, 0x8C	; 140
     ad0:	d0 40       	sbci	r29, 0x00	; 0
		if(serial_decode(cmdbuf,&par))
     ad2:	be 01       	movw	r22, r28
     ad4:	67 57       	subi	r22, 0x77	; 119
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	7f de       	rcall	.-770    	; 0x7dc <serial_decode>
     ade:	88 23       	and	r24, r24
     ae0:	09 f4       	brne	.+2      	; 0xae4 <main+0x15a>
     ae2:	90 c0       	rjmp	.+288    	; 0xc04 <main+0x27a>
			if(!strcmp_P(cmdbuf,PSTR("MODE")))
     ae4:	67 e1       	ldi	r22, 0x17	; 23
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	4c d3       	rcall	.+1688   	; 0x1186 <strcmp_P>
     aee:	89 2b       	or	r24, r25
     af0:	09 f0       	breq	.+2      	; 0xaf4 <main+0x16a>
     af2:	cd c0       	rjmp	.+410    	; 0xc8e <main+0x304>
				if(!par)
     af4:	c7 57       	subi	r28, 0x77	; 119
     af6:	df 4f       	sbci	r29, 0xFF	; 255
     af8:	e8 80       	ld	r14, Y
     afa:	f9 80       	ldd	r15, Y+1	; 0x01
     afc:	c9 58       	subi	r28, 0x89	; 137
     afe:	d0 40       	sbci	r29, 0x00	; 0
     b00:	e1 14       	cp	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <main+0x17e>
     b06:	69 c0       	rjmp	.+210    	; 0xbda <main+0x250>
					serial_error(SCPI_ERR_tooFewParameters,NULL,SCPI_ERR_STORE); // missing parameter
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	83 e9       	ldi	r24, 0x93	; 147
     b10:	9f ef       	ldi	r25, 0xFF	; 255
					serial_error(SCPI_ERR_wrongParamType,PSTR(" Only IND or CAP supported."),SCPI_ERR_STORE); // invalid
     b12:	f7 de       	rcall	.-530    	; 0x902 <serial_error>
				sbi(modf,CMD_RELAYS);
     b14:	6c c0       	rjmp	.+216    	; 0xbee <main+0x264>
		else if(bit_is_set(flags,BTN_RANGE))
     b16:	c5 57       	subi	r28, 0x75	; 117
     b18:	df 4f       	sbci	r29, 0xFF	; 255
     b1a:	88 81       	ld	r24, Y
     b1c:	cb 58       	subi	r28, 0x8B	; 139
     b1e:	d0 40       	sbci	r29, 0x00	; 0
     b20:	81 ff       	sbrs	r24, 1
     b22:	12 c0       	rjmp	.+36     	; 0xb48 <main+0x1be>
			ctrl.range++;
     b24:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ctrl+0x2>
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ctrl+0x2>
			if(ctrl.range > 1)
     b2e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ctrl+0x2>
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	10 f0       	brcs	.+4      	; 0xb3a <main+0x1b0>
				ctrl.range = 0;
     b36:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ctrl+0x2>
			sbi(modf,CMD_RELAYS);
     b3a:	c4 57       	subi	r28, 0x74	; 116
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	88 81       	ld	r24, Y
     b40:	cc 58       	subi	r28, 0x8C	; 140
     b42:	d0 40       	sbci	r29, 0x00	; 0
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	c0 cf       	rjmp	.-128    	; 0xac8 <main+0x13e>
		else if(bit_is_set(flags,BTN_IND))
     b48:	c5 57       	subi	r28, 0x75	; 117
     b4a:	df 4f       	sbci	r29, 0xFF	; 255
     b4c:	88 81       	ld	r24, Y
     b4e:	cb 58       	subi	r28, 0x8B	; 139
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	82 ff       	sbrs	r24, 2
     b54:	0c c0       	rjmp	.+24     	; 0xb6e <main+0x1e4>
			ctrl.ind++;
     b56:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ctrl+0x1>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ctrl+0x1>
			if(ctrl.ind > 1)
     b60:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ctrl+0x1>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	48 f3       	brcs	.-46     	; 0xb3a <main+0x1b0>
				ctrl.ind = 0;
     b68:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ctrl+0x1>
			sbi(modf,CMD_RELAYS);
     b6c:	e6 cf       	rjmp	.-52     	; 0xb3a <main+0x1b0>
		else if(bit_is_set(flags,BTN_COM))
     b6e:	c5 57       	subi	r28, 0x75	; 117
     b70:	df 4f       	sbci	r29, 0xFF	; 255
     b72:	88 81       	ld	r24, Y
     b74:	cb 58       	subi	r28, 0x8B	; 139
     b76:	d0 40       	sbci	r29, 0x00	; 0
     b78:	83 ff       	sbrs	r24, 3
     b7a:	0c c0       	rjmp	.+24     	; 0xb94 <main+0x20a>
			ctrl.com++;
     b7c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ctrl+0x3>
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ctrl+0x3>
			if(ctrl.com > 1)
     b86:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ctrl+0x3>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	b0 f2       	brcs	.-84     	; 0xb3a <main+0x1b0>
				ctrl.com = 0;
     b8e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ctrl+0x3>
			sbi(modf,CMD_RELAYS);
     b92:	d3 cf       	rjmp	.-90     	; 0xb3a <main+0x1b0>
		else if(bit_is_set(flags,BTN_POWER))
     b94:	c5 57       	subi	r28, 0x75	; 117
     b96:	df 4f       	sbci	r29, 0xFF	; 255
     b98:	88 81       	ld	r24, Y
     b9a:	cb 58       	subi	r28, 0x8B	; 139
     b9c:	d0 40       	sbci	r29, 0x00	; 0
     b9e:	84 ff       	sbrs	r24, 4
     ba0:	98 cf       	rjmp	.-208    	; 0xad2 <main+0x148>
			ctrl.power++;
     ba2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ctrl+0x4>
			if(ctrl.power > 1)
     bac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	10 f0       	brcs	.+4      	; 0xbb8 <main+0x22e>
				ctrl.power = 0;	
     bb4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ctrl+0x4>
			if(ctrl.power)
     bb8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     bbc:	88 23       	and	r24, r24
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <main+0x238>
     bc0:	bc cf       	rjmp	.-136    	; 0xb3a <main+0x1b0>
				modf |= (1<<CMD_PWR) | (1<<CMD_PWR_WAIT);
     bc2:	c4 57       	subi	r28, 0x74	; 116
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	88 81       	ld	r24, Y
     bc8:	cc 58       	subi	r28, 0x8C	; 140
     bca:	d0 40       	sbci	r29, 0x00	; 0
     bcc:	8c 60       	ori	r24, 0x0C	; 12
     bce:	c4 57       	subi	r28, 0x74	; 116
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	88 83       	st	Y, r24
     bd4:	cc 58       	subi	r28, 0x8C	; 140
     bd6:	d0 40       	sbci	r29, 0x00	; 0
     bd8:	b0 cf       	rjmp	.-160    	; 0xb3a <main+0x1b0>
				else if(!strcmp_P(par,PSTR("IND")))
     bda:	63 e1       	ldi	r22, 0x13	; 19
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	c7 01       	movw	r24, r14
     be0:	d2 d2       	rcall	.+1444   	; 0x1186 <strcmp_P>
     be2:	89 2b       	or	r24, r25
     be4:	09 f0       	breq	.+2      	; 0xbe8 <main+0x25e>
     be6:	44 c0       	rjmp	.+136    	; 0xc70 <main+0x2e6>
					ctrl.ind = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ctrl+0x1>
					sbi(modf,CMD_RELAYS);
     bee:	c4 57       	subi	r28, 0x74	; 116
     bf0:	df 4f       	sbci	r29, 0xFF	; 255
     bf2:	88 81       	ld	r24, Y
     bf4:	cc 58       	subi	r28, 0x8C	; 140
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	81 60       	ori	r24, 0x01	; 1
					sbi(modf,CMD_POT);
     bfa:	c4 57       	subi	r28, 0x74	; 116
     bfc:	df 4f       	sbci	r29, 0xFF	; 255
     bfe:	88 83       	st	Y, r24
     c00:	cc 58       	subi	r28, 0x8C	; 140
     c02:	d0 40       	sbci	r29, 0x00	; 0
		
		
		// --- UPDATE HW STATE ---

		// set DCDC state (no need for flags)
		bcopy_v(PBIASp,PBIAS, !ctrl.power, 0);
     c04:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     c08:	81 11       	cpse	r24, r1
     c0a:	3b c2       	rjmp	.+1142   	; 0x1082 <main+0x6f8>
     c0c:	5a 9a       	sbi	0x0b, 2	; 11

		// update power DAC
		if(bit_is_set(modf,CMD_PWR))
     c0e:	c4 57       	subi	r28, 0x74	; 116
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	88 81       	ld	r24, Y
     c14:	cc 58       	subi	r28, 0x8C	; 140
     c16:	d0 40       	sbci	r29, 0x00	; 0
     c18:	82 ff       	sbrs	r24, 2
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <main+0x2b0>
		{
			// wait for I2C ACK response - that should indicate power is up
			if(bit_is_set(modf,CMD_PWR_WAIT))
     c1c:	c4 57       	subi	r28, 0x74	; 116
     c1e:	df 4f       	sbci	r29, 0xFF	; 255
     c20:	88 81       	ld	r24, Y
     c22:	cc 58       	subi	r28, 0x8C	; 140
     c24:	d0 40       	sbci	r29, 0x00	; 0
     c26:	83 fd       	sbrc	r24, 3
     c28:	2e c2       	rjmp	.+1116   	; 0x1086 <main+0x6fc>
				while(LTC2631_init(I2C_ADDR_PWR) != 0);

			// set value
			LTC2631_init(I2C_ADDR_PWR);
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	51 dd       	rcall	.-1374   	; 0x6d0 <LTC2631_init>
			LTC2631_set(I2C_ADDR_PWR, ctrl.bias_pwr);
     c2e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <ctrl+0x5>
     c32:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <ctrl+0x6>
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	69 dd       	rcall	.-1326   	; 0x70c <LTC2631_set>
		}
		
		// update potential DAC
		if(bit_is_set(modf,CMD_POT))
     c3a:	c4 57       	subi	r28, 0x74	; 116
     c3c:	df 4f       	sbci	r29, 0xFF	; 255
     c3e:	88 81       	ld	r24, Y
     c40:	cc 58       	subi	r28, 0x8C	; 140
     c42:	d0 40       	sbci	r29, 0x00	; 0
     c44:	81 ff       	sbrs	r24, 1
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <main+0x2ce>
		{		
			LTC2631_init(I2C_ADDR_POT);
     c48:	82 e1       	ldi	r24, 0x12	; 18
     c4a:	42 dd       	rcall	.-1404   	; 0x6d0 <LTC2631_init>
			LTC2631_set(I2C_ADDR_POT, ctrl.bias_pot);
     c4c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <ctrl+0x7>
     c50:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <ctrl+0x8>
     c54:	82 e1       	ldi	r24, 0x12	; 18
     c56:	5a dd       	rcall	.-1356   	; 0x70c <LTC2631_set>
		}

		// update relays
		if(bit_is_set(modf,CMD_RELAYS))
     c58:	c4 57       	subi	r28, 0x74	; 116
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	88 81       	ld	r24, Y
     c5e:	cc 58       	subi	r28, 0x8C	; 140
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	80 ff       	sbrs	r24, 0
     c64:	f1 ce       	rjmp	.-542    	; 0xa48 <main+0xbe>
			set_relays(&ctrl,1);
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	89 e1       	ldi	r24, 0x19	; 25
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	65 db       	rcall	.-2358   	; 0x338 <set_relays>
	{
     c6e:	ec ce       	rjmp	.-552    	; 0xa48 <main+0xbe>
				else if(!strcmp_P(par,PSTR("CAP")))
     c70:	6f e0       	ldi	r22, 0x0F	; 15
     c72:	72 e0       	ldi	r23, 0x02	; 2
     c74:	c7 01       	movw	r24, r14
     c76:	87 d2       	rcall	.+1294   	; 0x1186 <strcmp_P>
     c78:	89 2b       	or	r24, r25
     c7a:	19 f4       	brne	.+6      	; 0xc82 <main+0x2f8>
					ctrl.ind = 0;
     c7c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ctrl+0x1>
     c80:	b6 cf       	rjmp	.-148    	; 0xbee <main+0x264>
					serial_error(SCPI_ERR_wrongParamType,PSTR(" Only IND or CAP supported."),SCPI_ERR_STORE); // invalid
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	63 ef       	ldi	r22, 0xF3	; 243
     c86:	71 e0       	ldi	r23, 0x01	; 1
     c88:	88 e9       	ldi	r24, 0x98	; 152
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	42 cf       	rjmp	.-380    	; 0xb12 <main+0x188>
			else if(!strcmp_P(cmdbuf,PSTR("RANGE")))
     c8e:	6d ee       	ldi	r22, 0xED	; 237
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	77 d2       	rcall	.+1262   	; 0x1186 <strcmp_P>
     c98:	89 2b       	or	r24, r25
     c9a:	c9 f4       	brne	.+50     	; 0xcce <main+0x344>
				if(!par)
     c9c:	c7 57       	subi	r28, 0x77	; 119
     c9e:	df 4f       	sbci	r29, 0xFF	; 255
     ca0:	88 81       	ld	r24, Y
     ca2:	99 81       	ldd	r25, Y+1	; 0x01
     ca4:	c9 58       	subi	r28, 0x89	; 137
     ca6:	d0 40       	sbci	r29, 0x00	; 0
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	39 f4       	brne	.+14     	; 0xcba <main+0x330>
					serial_error(SCPI_ERR_tooFewParameters,NULL,SCPI_ERR_STORE); // missing parameter
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	83 e9       	ldi	r24, 0x93	; 147
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
				serial_error(SCPI_ERR_undefinedHeader,NULL,SCPI_ERR_STORE);
     cb6:	25 de       	rcall	.-950    	; 0x902 <serial_error>
     cb8:	a5 cf       	rjmp	.-182    	; 0xc04 <main+0x27a>
					uint8_t val = atoi(par);
     cba:	22 d2       	rcall	.+1092   	; 0x1100 <atoi>
					if(val < 1 || val > 2)
     cbc:	81 50       	subi	r24, 0x01	; 1
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Only ranges 1 and 2 supported."),SCPI_ERR_STORE); // invalid
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	6d ec       	ldi	r22, 0xCD	; 205
     cc2:	71 e0       	ldi	r23, 0x01	; 1
					if(val < 1 || val > 2)
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	00 f7       	brcc	.-64     	; 0xc88 <main+0x2fe>
						ctrl.range = val - 1;
     cc8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ctrl+0x2>
					sbi(modf,CMD_RELAYS);
     ccc:	90 cf       	rjmp	.-224    	; 0xbee <main+0x264>
			else if(!strcmp_P(cmdbuf,PSTR("COMMON:STATE")))
     cce:	60 ec       	ldi	r22, 0xC0	; 192
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	57 d2       	rcall	.+1198   	; 0x1186 <strcmp_P>
     cd8:	89 2b       	or	r24, r25
     cda:	61 f5       	brne	.+88     	; 0xd34 <main+0x3aa>
				if(!par)
     cdc:	c7 57       	subi	r28, 0x77	; 119
     cde:	df 4f       	sbci	r29, 0xFF	; 255
     ce0:	e8 80       	ld	r14, Y
     ce2:	f9 80       	ldd	r15, Y+1	; 0x01
     ce4:	c9 58       	subi	r28, 0x89	; 137
     ce6:	d0 40       	sbci	r29, 0x00	; 0
     ce8:	e1 14       	cp	r14, r1
     cea:	f1 04       	cpc	r15, r1
     cec:	f9 f2       	breq	.-66     	; 0xcac <main+0x322>
					if(!strcmp_P(par,PSTR("ON")) || !strcmp_P(par,PSTR("1")))
     cee:	6d eb       	ldi	r22, 0xBD	; 189
     cf0:	71 e0       	ldi	r23, 0x01	; 1
     cf2:	c7 01       	movw	r24, r14
     cf4:	48 d2       	rcall	.+1168   	; 0x1186 <strcmp_P>
     cf6:	89 2b       	or	r24, r25
     cf8:	31 f0       	breq	.+12     	; 0xd06 <main+0x37c>
     cfa:	6b eb       	ldi	r22, 0xBB	; 187
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	c7 01       	movw	r24, r14
     d00:	42 d2       	rcall	.+1156   	; 0x1186 <strcmp_P>
     d02:	89 2b       	or	r24, r25
     d04:	21 f4       	brne	.+8      	; 0xd0e <main+0x384>
						ctrl.com = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ctrl+0x3>
     d0c:	70 cf       	rjmp	.-288    	; 0xbee <main+0x264>
					else if(!strcmp_P(par,PSTR("OFF")) || !strcmp_P(par,PSTR("0")))
     d0e:	67 eb       	ldi	r22, 0xB7	; 183
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	c7 01       	movw	r24, r14
     d14:	38 d2       	rcall	.+1136   	; 0x1186 <strcmp_P>
     d16:	89 2b       	or	r24, r25
     d18:	31 f0       	breq	.+12     	; 0xd26 <main+0x39c>
     d1a:	65 eb       	ldi	r22, 0xB5	; 181
     d1c:	71 e0       	ldi	r23, 0x01	; 1
     d1e:	c7 01       	movw	r24, r14
     d20:	32 d2       	rcall	.+1124   	; 0x1186 <strcmp_P>
     d22:	89 2b       	or	r24, r25
     d24:	19 f4       	brne	.+6      	; 0xd2c <main+0x3a2>
						ctrl.com = 0;
     d26:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ctrl+0x3>
     d2a:	61 cf       	rjmp	.-318    	; 0xbee <main+0x264>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Only ON/OFF or 1/0 supported."),SCPI_ERR_STORE); // invalid
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	66 e9       	ldi	r22, 0x96	; 150
     d30:	71 e0       	ldi	r23, 0x01	; 1
     d32:	aa cf       	rjmp	.-172    	; 0xc88 <main+0x2fe>
			else if(!strcmp_P(cmdbuf,PSTR("POWER:STATE")))
     d34:	6a e8       	ldi	r22, 0x8A	; 138
     d36:	71 e0       	ldi	r23, 0x01	; 1
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	24 d2       	rcall	.+1096   	; 0x1186 <strcmp_P>
     d3e:	89 2b       	or	r24, r25
     d40:	09 f0       	breq	.+2      	; 0xd44 <main+0x3ba>
     d42:	40 c0       	rjmp	.+128    	; 0xdc4 <main+0x43a>
				if(!par)
     d44:	c7 57       	subi	r28, 0x77	; 119
     d46:	df 4f       	sbci	r29, 0xFF	; 255
     d48:	e8 80       	ld	r14, Y
     d4a:	f9 80       	ldd	r15, Y+1	; 0x01
     d4c:	c9 58       	subi	r28, 0x89	; 137
     d4e:	d0 40       	sbci	r29, 0x00	; 0
     d50:	e1 14       	cp	r14, r1
     d52:	f1 04       	cpc	r15, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <main+0x3ce>
     d56:	aa cf       	rjmp	.-172    	; 0xcac <main+0x322>
					if(!strcmp_P(par,PSTR("ON")) || !strcmp_P(par,PSTR("1")))
     d58:	67 e8       	ldi	r22, 0x87	; 135
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	c7 01       	movw	r24, r14
     d5e:	13 d2       	rcall	.+1062   	; 0x1186 <strcmp_P>
     d60:	89 2b       	or	r24, r25
     d62:	31 f0       	breq	.+12     	; 0xd70 <main+0x3e6>
     d64:	65 e8       	ldi	r22, 0x85	; 133
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	c7 01       	movw	r24, r14
     d6a:	0d d2       	rcall	.+1050   	; 0x1186 <strcmp_P>
     d6c:	89 2b       	or	r24, r25
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <main+0x40e>
						ctrl.power = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ctrl+0x4>
					if(ctrl.power)
     d76:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ctrl+0x4>
     d7a:	88 23       	and	r24, r24
     d7c:	09 f4       	brne	.+2      	; 0xd80 <main+0x3f6>
     d7e:	37 cf       	rjmp	.-402    	; 0xbee <main+0x264>
						sbi(modf,CMD_PWR_WAIT);
     d80:	c4 57       	subi	r28, 0x74	; 116
     d82:	df 4f       	sbci	r29, 0xFF	; 255
     d84:	88 81       	ld	r24, Y
     d86:	cc 58       	subi	r28, 0x8C	; 140
     d88:	d0 40       	sbci	r29, 0x00	; 0
     d8a:	8c 60       	ori	r24, 0x0C	; 12
     d8c:	c4 57       	subi	r28, 0x74	; 116
     d8e:	df 4f       	sbci	r29, 0xFF	; 255
     d90:	88 83       	st	Y, r24
     d92:	cc 58       	subi	r28, 0x8C	; 140
     d94:	d0 40       	sbci	r29, 0x00	; 0
     d96:	2b cf       	rjmp	.-426    	; 0xbee <main+0x264>
					else if(!strcmp_P(par,PSTR("OFF")) || !strcmp_P(par,PSTR("0")))
     d98:	61 e8       	ldi	r22, 0x81	; 129
     d9a:	71 e0       	ldi	r23, 0x01	; 1
     d9c:	c7 01       	movw	r24, r14
     d9e:	f3 d1       	rcall	.+998    	; 0x1186 <strcmp_P>
     da0:	89 2b       	or	r24, r25
     da2:	31 f0       	breq	.+12     	; 0xdb0 <main+0x426>
     da4:	6f e7       	ldi	r22, 0x7F	; 127
     da6:	71 e0       	ldi	r23, 0x01	; 1
     da8:	c7 01       	movw	r24, r14
     daa:	ed d1       	rcall	.+986    	; 0x1186 <strcmp_P>
     dac:	89 2b       	or	r24, r25
     dae:	19 f4       	brne	.+6      	; 0xdb6 <main+0x42c>
						ctrl.power = 0;
     db0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ctrl+0x4>
     db4:	e0 cf       	rjmp	.-64     	; 0xd76 <main+0x3ec>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Only ON/OFF or 1/0 supported."),SCPI_ERR_STORE); // invalid
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	60 e6       	ldi	r22, 0x60	; 96
     dba:	71 e0       	ldi	r23, 0x01	; 1
     dbc:	88 e9       	ldi	r24, 0x98	; 152
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	a0 dd       	rcall	.-1216   	; 0x902 <serial_error>
     dc2:	d9 cf       	rjmp	.-78     	; 0xd76 <main+0x3ec>
			else if(!strcmp_P(cmdbuf,PSTR("BIAS:VOLT")))
     dc4:	66 e5       	ldi	r22, 0x56	; 86
     dc6:	71 e0       	ldi	r23, 0x01	; 1
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	dc d1       	rcall	.+952    	; 0x1186 <strcmp_P>
     dce:	89 2b       	or	r24, r25
     dd0:	f1 f5       	brne	.+124    	; 0xe4e <main+0x4c4>
				if(!par)
     dd2:	c7 57       	subi	r28, 0x77	; 119
     dd4:	df 4f       	sbci	r29, 0xFF	; 255
     dd6:	88 81       	ld	r24, Y
     dd8:	99 81       	ldd	r25, Y+1	; 0x01
     dda:	c9 58       	subi	r28, 0x89	; 137
     ddc:	d0 40       	sbci	r29, 0x00	; 0
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	09 f4       	brne	.+2      	; 0xde4 <main+0x45a>
     de2:	64 cf       	rjmp	.-312    	; 0xcac <main+0x322>
					uint16_t mvlev = atol(par);
     de4:	aa d1       	rcall	.+852    	; 0x113a <atol>
     de6:	6b 01       	movw	r12, r22
     de8:	7c 01       	movw	r14, r24
					if(mvlev > 5000)
     dea:	99 e8       	ldi	r25, 0x89	; 137
     dec:	c9 16       	cp	r12, r25
     dee:	93 e1       	ldi	r25, 0x13	; 19
     df0:	d9 06       	cpc	r13, r25
     df2:	30 f0       	brcs	.+12     	; 0xe00 <main+0x476>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Maximum supported level is 5000mV."),SCPI_ERR_STORE); // invalid range
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	62 e3       	ldi	r22, 0x32	; 50
     df8:	71 e0       	ldi	r23, 0x01	; 1
     dfa:	88 e9       	ldi	r24, 0x98	; 152
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	81 dd       	rcall	.-1278   	; 0x902 <serial_error>
					ctrl.bias = -1;
     e00:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <ctrl>
					ctrl.bias_pot = (uint16_t)(((uint32_t)mvlev*4095ul)/5000ul);
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	44 27       	eor	r20, r20
     e0a:	55 27       	eor	r21, r21
     e0c:	af ef       	ldi	r26, 0xFF	; 255
     e0e:	bf e0       	ldi	r27, 0x0F	; 15
     e10:	61 d1       	rcall	.+706    	; 0x10d4 <__muluhisi3>
     e12:	c3 57       	subi	r28, 0x73	; 115
     e14:	df 4f       	sbci	r29, 0xFF	; 255
     e16:	68 83       	st	Y, r22
     e18:	79 83       	std	Y+1, r23	; 0x01
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	9b 83       	std	Y+3, r25	; 0x03
     e1e:	cd 58       	subi	r28, 0x8D	; 141
     e20:	d0 40       	sbci	r29, 0x00	; 0
     e22:	a5 01       	movw	r20, r10
     e24:	94 01       	movw	r18, r8
     e26:	34 d1       	rcall	.+616    	; 0x1090 <__udivmodsi4>
     e28:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <ctrl+0x8>
     e2c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <ctrl+0x7>
					ctrl.bias_pwr = ctrl.bias_pot;
     e30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ctrl+0x7>
     e34:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ctrl+0x8>
     e38:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ctrl+0x6>
     e3c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ctrl+0x5>
					sbi(modf,CMD_POT);
     e40:	c4 57       	subi	r28, 0x74	; 116
     e42:	df 4f       	sbci	r29, 0xFF	; 255
     e44:	88 81       	ld	r24, Y
     e46:	cc 58       	subi	r28, 0x8C	; 140
     e48:	d0 40       	sbci	r29, 0x00	; 0
     e4a:	86 60       	ori	r24, 0x06	; 6
     e4c:	d6 ce       	rjmp	.-596    	; 0xbfa <main+0x270>
			else if(!strcmp_P(cmdbuf,PSTR("BIAS:POT:VOLT")))
     e4e:	64 e2       	ldi	r22, 0x24	; 36
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	97 d1       	rcall	.+814    	; 0x1186 <strcmp_P>
     e58:	89 2b       	or	r24, r25
     e5a:	b1 f5       	brne	.+108    	; 0xec8 <main+0x53e>
				if(!par)
     e5c:	c7 57       	subi	r28, 0x77	; 119
     e5e:	df 4f       	sbci	r29, 0xFF	; 255
     e60:	88 81       	ld	r24, Y
     e62:	99 81       	ldd	r25, Y+1	; 0x01
     e64:	c9 58       	subi	r28, 0x89	; 137
     e66:	d0 40       	sbci	r29, 0x00	; 0
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	09 f4       	brne	.+2      	; 0xe6e <main+0x4e4>
     e6c:	1f cf       	rjmp	.-450    	; 0xcac <main+0x322>
					uint16_t mvlev = atol(par);
     e6e:	65 d1       	rcall	.+714    	; 0x113a <atol>
     e70:	6b 01       	movw	r12, r22
     e72:	7c 01       	movw	r14, r24
					if(mvlev > 5000)
     e74:	89 e8       	ldi	r24, 0x89	; 137
     e76:	c8 16       	cp	r12, r24
     e78:	83 e1       	ldi	r24, 0x13	; 19
     e7a:	d8 06       	cpc	r13, r24
     e7c:	30 f0       	brcs	.+12     	; 0xe8a <main+0x500>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Maximum supported level is 5000mV."),SCPI_ERR_STORE); // invalid range
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	71 e0       	ldi	r23, 0x01	; 1
     e84:	88 e9       	ldi	r24, 0x98	; 152
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	3c dd       	rcall	.-1416   	; 0x902 <serial_error>
					ctrl.bias = -1;
     e8a:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <ctrl>
					ctrl.bias_pot = (uint16_t)(((uint32_t)mvlev*4095ul)/5000ul);
     e8e:	a7 01       	movw	r20, r14
     e90:	96 01       	movw	r18, r12
     e92:	44 27       	eor	r20, r20
     e94:	55 27       	eor	r21, r21
     e96:	af ef       	ldi	r26, 0xFF	; 255
     e98:	bf e0       	ldi	r27, 0x0F	; 15
     e9a:	1c d1       	rcall	.+568    	; 0x10d4 <__muluhisi3>
     e9c:	c3 57       	subi	r28, 0x73	; 115
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	68 83       	st	Y, r22
     ea2:	79 83       	std	Y+1, r23	; 0x01
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	9b 83       	std	Y+3, r25	; 0x03
     ea8:	cd 58       	subi	r28, 0x8D	; 141
     eaa:	d0 40       	sbci	r29, 0x00	; 0
     eac:	a5 01       	movw	r20, r10
     eae:	94 01       	movw	r18, r8
     eb0:	ef d0       	rcall	.+478    	; 0x1090 <__udivmodsi4>
     eb2:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <ctrl+0x8>
     eb6:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <ctrl+0x7>
					sbi(modf,CMD_POT);
     eba:	c4 57       	subi	r28, 0x74	; 116
     ebc:	df 4f       	sbci	r29, 0xFF	; 255
     ebe:	88 81       	ld	r24, Y
     ec0:	cc 58       	subi	r28, 0x8C	; 140
     ec2:	d0 40       	sbci	r29, 0x00	; 0
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	99 ce       	rjmp	.-718    	; 0xbfa <main+0x270>
			else if(!strcmp_P(cmdbuf,PSTR("BIAS:PWR:VOLT")))
     ec8:	62 ef       	ldi	r22, 0xF2	; 242
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	5a d1       	rcall	.+692    	; 0x1186 <strcmp_P>
     ed2:	89 2b       	or	r24, r25
     ed4:	b1 f5       	brne	.+108    	; 0xf42 <main+0x5b8>
				if(!par)
     ed6:	c7 57       	subi	r28, 0x77	; 119
     ed8:	df 4f       	sbci	r29, 0xFF	; 255
     eda:	88 81       	ld	r24, Y
     edc:	99 81       	ldd	r25, Y+1	; 0x01
     ede:	c9 58       	subi	r28, 0x89	; 137
     ee0:	d0 40       	sbci	r29, 0x00	; 0
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	09 f4       	brne	.+2      	; 0xee8 <main+0x55e>
     ee6:	e2 ce       	rjmp	.-572    	; 0xcac <main+0x322>
					uint16_t mvlev = atol(par);
     ee8:	28 d1       	rcall	.+592    	; 0x113a <atol>
     eea:	6b 01       	movw	r12, r22
     eec:	7c 01       	movw	r14, r24
					if(mvlev > 5000)
     eee:	99 e8       	ldi	r25, 0x89	; 137
     ef0:	c9 16       	cp	r12, r25
     ef2:	93 e1       	ldi	r25, 0x13	; 19
     ef4:	d9 06       	cpc	r13, r25
     ef6:	30 f0       	brcs	.+12     	; 0xf04 <main+0x57a>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Maximum supported level is 5000mV."),SCPI_ERR_STORE); // invalid range
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	6e ec       	ldi	r22, 0xCE	; 206
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	88 e9       	ldi	r24, 0x98	; 152
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	ff dc       	rcall	.-1538   	; 0x902 <serial_error>
					ctrl.bias = -1;
     f04:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <ctrl>
					ctrl.bias_pwr = (uint16_t)(((uint32_t)mvlev*4095ul)/5000ul);
     f08:	a7 01       	movw	r20, r14
     f0a:	96 01       	movw	r18, r12
     f0c:	44 27       	eor	r20, r20
     f0e:	55 27       	eor	r21, r21
     f10:	af ef       	ldi	r26, 0xFF	; 255
     f12:	bf e0       	ldi	r27, 0x0F	; 15
     f14:	df d0       	rcall	.+446    	; 0x10d4 <__muluhisi3>
     f16:	c3 57       	subi	r28, 0x73	; 115
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	68 83       	st	Y, r22
     f1c:	79 83       	std	Y+1, r23	; 0x01
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	9b 83       	std	Y+3, r25	; 0x03
     f22:	cd 58       	subi	r28, 0x8D	; 141
     f24:	d0 40       	sbci	r29, 0x00	; 0
     f26:	a5 01       	movw	r20, r10
     f28:	94 01       	movw	r18, r8
     f2a:	b2 d0       	rcall	.+356    	; 0x1090 <__udivmodsi4>
     f2c:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <ctrl+0x6>
     f30:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <ctrl+0x5>
					sbi(modf,CMD_PWR);
     f34:	c4 57       	subi	r28, 0x74	; 116
     f36:	df 4f       	sbci	r29, 0xFF	; 255
     f38:	88 81       	ld	r24, Y
     f3a:	cc 58       	subi	r28, 0x8C	; 140
     f3c:	d0 40       	sbci	r29, 0x00	; 0
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	5c ce       	rjmp	.-840    	; 0xbfa <main+0x270>
			else if(!strcmp_P(cmdbuf,PSTR("FAN")))
     f42:	6a ec       	ldi	r22, 0xCA	; 202
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	1d d1       	rcall	.+570    	; 0x1186 <strcmp_P>
     f4c:	89 2b       	or	r24, r25
     f4e:	61 f5       	brne	.+88     	; 0xfa8 <main+0x61e>
				if(!par)
     f50:	c7 57       	subi	r28, 0x77	; 119
     f52:	df 4f       	sbci	r29, 0xFF	; 255
     f54:	e8 80       	ld	r14, Y
     f56:	f9 80       	ldd	r15, Y+1	; 0x01
     f58:	c9 58       	subi	r28, 0x89	; 137
     f5a:	d0 40       	sbci	r29, 0x00	; 0
     f5c:	e1 14       	cp	r14, r1
     f5e:	f1 04       	cpc	r15, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <main+0x5da>
     f62:	a4 ce       	rjmp	.-696    	; 0xcac <main+0x322>
					if(!strcmp_P(par,PSTR("LO")) || !strcmp_P(par,PSTR("LOW")))
     f64:	67 ec       	ldi	r22, 0xC7	; 199
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	c7 01       	movw	r24, r14
     f6a:	0d d1       	rcall	.+538    	; 0x1186 <strcmp_P>
     f6c:	89 2b       	or	r24, r25
     f6e:	31 f0       	breq	.+12     	; 0xf7c <main+0x5f2>
     f70:	63 ec       	ldi	r22, 0xC3	; 195
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	c7 01       	movw	r24, r14
     f76:	07 d1       	rcall	.+526    	; 0x1186 <strcmp_P>
     f78:	89 2b       	or	r24, r25
     f7a:	11 f4       	brne	.+4      	; 0xf80 <main+0x5f6>
						cbi(PFANp,PFAN)
     f7c:	43 98       	cbi	0x08, 3	; 8
     f7e:	42 ce       	rjmp	.-892    	; 0xc04 <main+0x27a>
					else if(!strcmp_P(par,PSTR("HIGH")) || !strcmp_P(par,PSTR("HI")))
     f80:	6e eb       	ldi	r22, 0xBE	; 190
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	c7 01       	movw	r24, r14
     f86:	ff d0       	rcall	.+510    	; 0x1186 <strcmp_P>
     f88:	89 2b       	or	r24, r25
     f8a:	31 f0       	breq	.+12     	; 0xf98 <main+0x60e>
     f8c:	6b eb       	ldi	r22, 0xBB	; 187
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	c7 01       	movw	r24, r14
     f92:	f9 d0       	rcall	.+498    	; 0x1186 <strcmp_P>
     f94:	89 2b       	or	r24, r25
     f96:	11 f4       	brne	.+4      	; 0xf9c <main+0x612>
						sbi(PFANp,PFAN)
     f98:	43 9a       	sbi	0x08, 3	; 8
     f9a:	34 ce       	rjmp	.-920    	; 0xc04 <main+0x27a>
						serial_error(SCPI_ERR_wrongParamType,PSTR(" Only LO/HI or LOW/HIGH supported."),SCPI_ERR_STORE); // invalid
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	68 e9       	ldi	r22, 0x98	; 152
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	88 e9       	ldi	r24, 0x98	; 152
     fa4:	9f ef       	ldi	r25, 0xFF	; 255
     fa6:	87 ce       	rjmp	.-754    	; 0xcb6 <main+0x32c>
			else if(!strcmp_P(cmdbuf,PSTR("*OPC?")))
     fa8:	62 e9       	ldi	r22, 0x92	; 146
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	ea d0       	rcall	.+468    	; 0x1186 <strcmp_P>
     fb2:	89 2b       	or	r24, r25
     fb4:	21 f4       	brne	.+8      	; 0xfbe <main+0x634>
				serial_tx_cstr(PSTR("+1\n"));
     fb6:	8e e8       	ldi	r24, 0x8E	; 142
     fb8:	90 e0       	ldi	r25, 0x00	; 0
					serial_tx_cstr(PSTR("0\n"));				
     fba:	81 dc       	rcall	.-1790   	; 0x8be <serial_tx_cstr>
     fbc:	23 ce       	rjmp	.-954    	; 0xc04 <main+0x27a>
			else if(!strcmp_P(cmdbuf,PSTR("*RST")))
     fbe:	69 e8       	ldi	r22, 0x89	; 137
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	df d0       	rcall	.+446    	; 0x1186 <strcmp_P>
     fc8:	89 2b       	or	r24, r25
     fca:	11 f4       	brne	.+4      	; 0xfd0 <main+0x646>
				cli();
     fcc:	f8 94       	cli
				boot_start(0x0000ul);
     fce:	dd cc       	rjmp	.-1606   	; 0x98a <main>
			else if(!strcmp_P(cmdbuf,PSTR("*IDN?")))
     fd0:	63 e8       	ldi	r22, 0x83	; 131
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	d6 d0       	rcall	.+428    	; 0x1186 <strcmp_P>
     fda:	89 2b       	or	r24, r25
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <main+0x65a>
				serial_tx_cstr(PSTR("Z-Simulator Bias Source V1.1, s.n. 20200214\n"));
     fde:	86 e5       	ldi	r24, 0x56	; 86
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	eb cf       	rjmp	.-42     	; 0xfba <main+0x630>
			else if(!strcmp_P(cmdbuf,PSTR("SYST:ERR?")))
     fe4:	6c e4       	ldi	r22, 0x4C	; 76
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	cc d0       	rcall	.+408    	; 0x1186 <strcmp_P>
     fee:	89 2b       	or	r24, r25
     ff0:	31 f4       	brne	.+12     	; 0xffe <main+0x674>
				serial_error(SCPI_ERR_noError,NULL,SCPI_ERR_SEND);				
     ff2:	42 e0       	ldi	r20, 0x02	; 2
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	5c ce       	rjmp	.-840    	; 0xcb6 <main+0x32c>
			else if(!strcmp_P(cmdbuf,PSTR("SYST:BOOT")))
     ffe:	62 e4       	ldi	r22, 0x42	; 66
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	bf d0       	rcall	.+382    	; 0x1186 <strcmp_P>
    1008:	89 2b       	or	r24, r25
    100a:	a9 f5       	brne	.+106    	; 0x1076 <main+0x6ec>
				if(par && !strcmp_P(par,PSTR("17IND10")))
    100c:	c7 57       	subi	r28, 0x77	; 119
    100e:	df 4f       	sbci	r29, 0xFF	; 255
    1010:	88 81       	ld	r24, Y
    1012:	99 81       	ldd	r25, Y+1	; 0x01
    1014:	c9 58       	subi	r28, 0x89	; 137
    1016:	d0 40       	sbci	r29, 0x00	; 0
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	51 f1       	breq	.+84     	; 0x1070 <main+0x6e6>
    101c:	6a e3       	ldi	r22, 0x3A	; 58
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	b2 d0       	rcall	.+356    	; 0x1186 <strcmp_P>
    1022:	89 2b       	or	r24, r25
    1024:	29 f5       	brne	.+74     	; 0x1070 <main+0x6e6>
					serial_tx_cstr(PSTR("1\n"));				
    1026:	87 e3       	ldi	r24, 0x37	; 55
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	49 dc       	rcall	.-1902   	; 0x8be <serial_tx_cstr>
					uint8_t fuex = boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
    102c:	89 e0       	ldi	r24, 0x09	; 9
    102e:	e2 e0       	ldi	r30, 0x02	; 2
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    1036:	e4 91       	lpm	r30, Z
					fuex = !!(fuex&(~FUSE_BOOTSZ0)) + (!!(fuex&(~FUSE_BOOTSZ1))<<1);
    1038:	2e 2f       	mov	r18, r30
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	e2 ff       	sbrs	r30, 2
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	21 ff       	sbrs	r18, 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	89 0f       	add	r24, r25
					uint16_t addr = FLASHEND + 1 - (256ul<<(3 - fuex));
    1048:	23 e0       	ldi	r18, 0x03	; 3
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	28 1b       	sub	r18, r24
    104e:	31 09       	sbc	r19, r1
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <main+0x6d8>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	aa 1f       	adc	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	2a 95       	dec	r18
    1064:	d2 f7       	brpl	.-12     	; 0x105a <main+0x6d0>
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f0 e2       	ldi	r31, 0x20	; 32
    106a:	e8 1b       	sub	r30, r24
    106c:	f9 0b       	sbc	r31, r25
					boot_start(addr);
    106e:	09 94       	ijmp
					serial_tx_cstr(PSTR("0\n"));				
    1070:	84 e3       	ldi	r24, 0x34	; 52
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a2 cf       	rjmp	.-188    	; 0xfba <main+0x630>
				serial_error(SCPI_ERR_undefinedHeader,NULL,SCPI_ERR_STORE);
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	8f e8       	ldi	r24, 0x8F	; 143
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	1a ce       	rjmp	.-972    	; 0xcb6 <main+0x32c>
		bcopy_v(PBIASp,PBIAS, !ctrl.power, 0);
    1082:	5a 98       	cbi	0x0b, 2	; 11
    1084:	c4 cd       	rjmp	.-1144   	; 0xc0e <main+0x284>
				while(LTC2631_init(I2C_ADDR_PWR) != 0);
    1086:	80 e1       	ldi	r24, 0x10	; 16
    1088:	23 db       	rcall	.-2490   	; 0x6d0 <LTC2631_init>
    108a:	81 11       	cpse	r24, r1
    108c:	fc cf       	rjmp	.-8      	; 0x1086 <main+0x6fc>
    108e:	cd cd       	rjmp	.-1126   	; 0xc2a <main+0x2a0>

00001090 <__udivmodsi4>:
    1090:	a1 e2       	ldi	r26, 0x21	; 33
    1092:	1a 2e       	mov	r1, r26
    1094:	aa 1b       	sub	r26, r26
    1096:	bb 1b       	sub	r27, r27
    1098:	fd 01       	movw	r30, r26
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <__udivmodsi4_ep>

0000109c <__udivmodsi4_loop>:
    109c:	aa 1f       	adc	r26, r26
    109e:	bb 1f       	adc	r27, r27
    10a0:	ee 1f       	adc	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	a2 17       	cp	r26, r18
    10a6:	b3 07       	cpc	r27, r19
    10a8:	e4 07       	cpc	r30, r20
    10aa:	f5 07       	cpc	r31, r21
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__udivmodsi4_ep>
    10ae:	a2 1b       	sub	r26, r18
    10b0:	b3 0b       	sbc	r27, r19
    10b2:	e4 0b       	sbc	r30, r20
    10b4:	f5 0b       	sbc	r31, r21

000010b6 <__udivmodsi4_ep>:
    10b6:	66 1f       	adc	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	1a 94       	dec	r1
    10c0:	69 f7       	brne	.-38     	; 0x109c <__udivmodsi4_loop>
    10c2:	60 95       	com	r22
    10c4:	70 95       	com	r23
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	bd 01       	movw	r22, r26
    10d0:	cf 01       	movw	r24, r30
    10d2:	08 95       	ret

000010d4 <__muluhisi3>:
    10d4:	09 d0       	rcall	.+18     	; 0x10e8 <__umulhisi3>
    10d6:	a5 9f       	mul	r26, r21
    10d8:	90 0d       	add	r25, r0
    10da:	b4 9f       	mul	r27, r20
    10dc:	90 0d       	add	r25, r0
    10de:	a4 9f       	mul	r26, r20
    10e0:	80 0d       	add	r24, r0
    10e2:	91 1d       	adc	r25, r1
    10e4:	11 24       	eor	r1, r1
    10e6:	08 95       	ret

000010e8 <__umulhisi3>:
    10e8:	a2 9f       	mul	r26, r18
    10ea:	b0 01       	movw	r22, r0
    10ec:	b3 9f       	mul	r27, r19
    10ee:	c0 01       	movw	r24, r0
    10f0:	a3 9f       	mul	r26, r19
    10f2:	01 d0       	rcall	.+2      	; 0x10f6 <__umulhisi3+0xe>
    10f4:	b2 9f       	mul	r27, r18
    10f6:	70 0d       	add	r23, r0
    10f8:	81 1d       	adc	r24, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	91 1d       	adc	r25, r1
    10fe:	08 95       	ret

00001100 <atoi>:
    1100:	fc 01       	movw	r30, r24
    1102:	88 27       	eor	r24, r24
    1104:	99 27       	eor	r25, r25
    1106:	e8 94       	clt
    1108:	21 91       	ld	r18, Z+
    110a:	20 32       	cpi	r18, 0x20	; 32
    110c:	e9 f3       	breq	.-6      	; 0x1108 <atoi+0x8>
    110e:	29 30       	cpi	r18, 0x09	; 9
    1110:	10 f0       	brcs	.+4      	; 0x1116 <atoi+0x16>
    1112:	2e 30       	cpi	r18, 0x0E	; 14
    1114:	c8 f3       	brcs	.-14     	; 0x1108 <atoi+0x8>
    1116:	2b 32       	cpi	r18, 0x2B	; 43
    1118:	39 f0       	breq	.+14     	; 0x1128 <atoi+0x28>
    111a:	2d 32       	cpi	r18, 0x2D	; 45
    111c:	31 f4       	brne	.+12     	; 0x112a <atoi+0x2a>
    111e:	68 94       	set
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <atoi+0x28>
    1122:	4f d0       	rcall	.+158    	; 0x11c2 <__mulhi_const_10>
    1124:	82 0f       	add	r24, r18
    1126:	91 1d       	adc	r25, r1
    1128:	21 91       	ld	r18, Z+
    112a:	20 53       	subi	r18, 0x30	; 48
    112c:	2a 30       	cpi	r18, 0x0A	; 10
    112e:	c8 f3       	brcs	.-14     	; 0x1122 <atoi+0x22>
    1130:	1e f4       	brtc	.+6      	; 0x1138 <atoi+0x38>
    1132:	90 95       	com	r25
    1134:	81 95       	neg	r24
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <atol>:
    113a:	1f 93       	push	r17
    113c:	fc 01       	movw	r30, r24
    113e:	99 27       	eor	r25, r25
    1140:	88 27       	eor	r24, r24
    1142:	bc 01       	movw	r22, r24
    1144:	e8 94       	clt
    1146:	11 91       	ld	r17, Z+
    1148:	10 32       	cpi	r17, 0x20	; 32
    114a:	e9 f3       	breq	.-6      	; 0x1146 <atol+0xc>
    114c:	19 30       	cpi	r17, 0x09	; 9
    114e:	10 f0       	brcs	.+4      	; 0x1154 <atol+0x1a>
    1150:	1e 30       	cpi	r17, 0x0E	; 14
    1152:	c8 f3       	brcs	.-14     	; 0x1146 <atol+0xc>
    1154:	1b 32       	cpi	r17, 0x2B	; 43
    1156:	49 f0       	breq	.+18     	; 0x116a <atol+0x30>
    1158:	1d 32       	cpi	r17, 0x2D	; 45
    115a:	41 f4       	brne	.+16     	; 0x116c <atol+0x32>
    115c:	68 94       	set
    115e:	05 c0       	rjmp	.+10     	; 0x116a <atol+0x30>
    1160:	1b d0       	rcall	.+54     	; 0x1198 <__mulsi_const_10>
    1162:	61 0f       	add	r22, r17
    1164:	71 1d       	adc	r23, r1
    1166:	81 1d       	adc	r24, r1
    1168:	91 1d       	adc	r25, r1
    116a:	11 91       	ld	r17, Z+
    116c:	10 53       	subi	r17, 0x30	; 48
    116e:	1a 30       	cpi	r17, 0x0A	; 10
    1170:	b8 f3       	brcs	.-18     	; 0x1160 <atol+0x26>
    1172:	3e f4       	brtc	.+14     	; 0x1182 <atol+0x48>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <strcmp_P>:
    1186:	fb 01       	movw	r30, r22
    1188:	dc 01       	movw	r26, r24
    118a:	8d 91       	ld	r24, X+
    118c:	05 90       	lpm	r0, Z+
    118e:	80 19       	sub	r24, r0
    1190:	01 10       	cpse	r0, r1
    1192:	d9 f3       	breq	.-10     	; 0x118a <strcmp_P+0x4>
    1194:	99 0b       	sbc	r25, r25
    1196:	08 95       	ret

00001198 <__mulsi_const_10>:
    1198:	59 2f       	mov	r21, r25
    119a:	48 2f       	mov	r20, r24
    119c:	37 2f       	mov	r19, r23
    119e:	26 2f       	mov	r18, r22
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	62 0f       	add	r22, r18
    11b2:	73 1f       	adc	r23, r19
    11b4:	84 1f       	adc	r24, r20
    11b6:	95 1f       	adc	r25, r21
    11b8:	66 0f       	add	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	08 95       	ret

000011c2 <__mulhi_const_10>:
    11c2:	7a e0       	ldi	r23, 0x0A	; 10
    11c4:	97 9f       	mul	r25, r23
    11c6:	90 2d       	mov	r25, r0
    11c8:	87 9f       	mul	r24, r23
    11ca:	80 2d       	mov	r24, r0
    11cc:	91 0d       	add	r25, r1
    11ce:	11 24       	eor	r1, r1
    11d0:	08 95       	ret

000011d2 <_exit>:
    11d2:	f8 94       	cli

000011d4 <__stop_program>:
    11d4:	ff cf       	rjmp	.-2      	; 0x11d4 <__stop_program>
